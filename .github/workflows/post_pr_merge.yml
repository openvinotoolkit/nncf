# With the squash-and-merge strategy that we are employing, the final commit that ends up in the develop branch
# after the PR merge has a brand-new commit SHA that is not equal to the SHA of the last commit in the PR.
# This means that the coverage reports uploaded to Codecov in the course of the (yet unmerged) PR checks will not
# be translated to the ultimate commit in the develop and Codecov will show "missing base report" errors in the UI.
# We don't want to re-run the precommits after PR merge via a separate 'on: push' action on the develop branch, so
# instead will grab the latest coverage report artifact from the just-merged PR and upload it as the report for the
# new commit on develop. Note that this will break if the PR is merged before the coverage artifact for the latest
# PR commit is generated.

name: Post-PR merge actions
permissions: read-all

on:
  pull_request_target:
    branches:
      - develop
    types:
      - closed

jobs:
  upload-coverage-common:
    if: github.event.pull_request.merged == true
    uses: ./.github/workflows/upload_coverage_for_develop.yml
    with:
      merge_commit_sha: ${{ github.event.pull_request.merge_commit_sha }}
      last_sha_in_pr: ${{ github.event.pull_request.head.sha }}
      coverage_artifact_name_in_pr: coverage_common
      coverage_flags: COMMON
    secrets:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  upload-coverage-onnx:
    if: github.event.pull_request.merged == true
    uses: ./.github/workflows/upload_coverage_for_develop.yml
    with:
      merge_commit_sha: ${{ github.event.pull_request.merge_commit_sha }}
      last_sha_in_pr: ${{ github.event.pull_request.head.sha }}
      coverage_artifact_name_in_pr: coverage_onnx
      coverage_flags: ONNX
    secrets:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  upload-coverage-openvino:
    if: github.event.pull_request.merged == true
    uses: ./.github/workflows/upload_coverage_for_develop.yml
    with:
      merge_commit_sha: ${{ github.event.pull_request.merge_commit_sha }}
      last_sha_in_pr: ${{ github.event.pull_request.head.sha }}
      coverage_artifact_name_in_pr: coverage_openvino
      coverage_flags: OPENVINO
    secrets:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  upload-coverage-torch-cpu:
    if: github.event.pull_request.merged == true
    uses: ./.github/workflows/upload_coverage_for_develop.yml
    with:
      merge_commit_sha: ${{ github.event.pull_request.merge_commit_sha }}
      last_sha_in_pr: ${{ github.event.pull_request.head.sha }}
      coverage_artifact_name_in_pr: coverage_pt_cpu
      coverage_flags: TORCH
    secrets:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  upload-coverage-torch-cuda:
    if: github.event.pull_request.merged == true
    uses: ./.github/workflows/upload_coverage_for_develop.yml
    with:
      merge_commit_sha: ${{ github.event.pull_request.merge_commit_sha }}
      last_sha_in_pr: ${{ github.event.pull_request.head.sha }}
      coverage_artifact_name_in_pr: coverage_pt_cuda
      coverage_flags: TORCH
    secrets:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  upload-coverage-tensorflow:
    if: github.event.pull_request.merged == true
    uses: ./.github/workflows/upload_coverage_for_develop.yml
    with:
      merge_commit_sha: ${{ github.event.pull_request.merge_commit_sha }}
      last_sha_in_pr: ${{ github.event.pull_request.head.sha }}
      coverage_artifact_name_in_pr: coverage_tensorflow
      coverage_flags: TENSORFLOW
    secrets:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
