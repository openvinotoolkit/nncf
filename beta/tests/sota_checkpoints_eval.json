{
    "object_detection": {
        "coco2017": {
            "dataset_types": [
                "tfds",
                "tfrecords"
            ],
            "topologies": {
                "retinanet": {
                    "config": "examples/tensorflow/object_detection/configs/retinanet_coco.json",
                    "target": 33.44,
                    "weights": "retinanet/retinanet.h5",
                    "metric_type": "mAP",
                    "model_description": "retinanet",
                    "batch_per_gpu": 15
                },
                "retinanet_int8_w_sym_t_a_sym_t": {
                    "config": "examples/tensorflow/object_detection/configs/quantization/retinanet_coco_int8.json",
                    "reference": "retinanet",
                    "target": 33.3,
                    "resume": "retinanet_int8_w_sym_t_a_sym_t",
                    "metric_type": "mAP",
                    "model_description": "retinanet_int8_w_sym_t_a_sym_t",
                    "compression_description": "INT8",
                    "batch_per_gpu": 15
                },
                "retinanet_sparsity_50": {
                    "config": "examples/tensorflow/object_detection/configs/sparsity/retinanet_coco_magnitude_sparsity.json",
                    "reference": "retinanet",
                    "target": 33.13,
                    "resume": "retinanet_sparsity_50",
                    "metric_type": "mAP",
                    "model_description": "retinanet_sparsity_50",
                    "compression_description": "Sparsity 50",
                    "batch_per_gpu": 15
                },
                "retinanet_pruning_40": {
                    "config": "examples/tensorflow/object_detection/configs/pruning/retinanet_coco_pruning.json",
                    "reference": "retinanet",
                    "target": 32.7,
                    "resume": "retinanet_pruning_40",
                    "metric_type": "mAP",
                    "model_description": "retinanet_pruning_40",
                    "compression_description": "Filter pruning 40%",
                    "batch_per_gpu": 15,
                    "diff_fp32_min": -1,
                    "diff_fp32_max": 0.4
                },
                "yolo_v4": {
                    "config":"examples/tensorflow/object_detection/configs/yolo_v4_coco.json",
                    "target":47.04,
                    "weights":"yolo_v4/yolo_v4.h5",
                    "metric_type":"mAP",
                    "model_description":"yolo_v4",
                    "batch_per_gpu": 15
                },
                "yolo_v4_sparsity_50": {
                    "config":"examples/tensorflow/object_detection/configs/sparsity/yolo_v4_coco_magnitude_sparsity.json",
                    "reference":"yolo_v4",
                    "target":46.54,
                    "resume":"yolo_v4_sparsity_50",
                    "metric_type":"mAP",
                    "model_description":"yolo_v4_sparsity_50",
                    "compression_description":"Sparsity50",
                    "batch_per_gpu": 15
                }
            }
        }
    },
    "segmentation": {
        "coco2017": {
            "dataset_types": ["tfrecords"],
            "topologies": {
                "mask_rcnn_baseline": {
                    "config": "examples/tensorflow/segmentation/configs/mask_rcnn_coco.json",
                    "target": 37.33,
                    "weights": "mask_rcnn_baseline",
                    "metric_type": "mAP",
                    "model_description": "mask_rcnn_baseline",
                    "batch_per_gpu": 4
                },
                "mask_rcnn_int8_w_sym_t_a_sym_t": {
                    "config": "examples/tensorflow/segmentation/configs/quantization/mask_rcnn_coco_int8.json",
                    "reference": "mask_rcnn_baseline",
                    "target": 37.25,
                    "resume": "mask_rcnn_int8_w_sym_t_a_sym_t",
                    "metric_type": "mAP",
                    "model_description": "mask_rcnn_int8_w_sym_t_a_sym_t",
                    "compression_description": "INT8",
                    "batch_per_gpu": 4
                },
                "mask_rcnn_sparsity_50": {
                    "config": "examples/tensorflow/segmentation/configs/sparsity/mask_rcnn_coco_magnitude_sparsity.json",
                    "reference": "mask_rcnn_baseline",
                    "target": 36.93,
                    "resume": "mask_rcnn_sparsity_50",
                    "metric_type": "mAP",
                    "model_description": "mask_rcnn_sparsity_50",
                    "compression_description": "Sparsity 50",
                    "batch_per_gpu": 4
                }
            }
        }
    }
}
