:py:mod:`nncf.common.compression`
=================================

.. py:module:: nncf.common.compression



Classes
~~~~~~~

.. autoapisummary::

   nncf.common.compression.BaseCompressionAlgorithmController




.. py:class:: BaseCompressionAlgorithmController(target_model)

   Bases: :py:obj:`nncf.api.compression.CompressionAlgorithmController`, :py:obj:`abc.ABC`

   Contains the implementation of the basic functionality of the compression controller.

   .. py:property:: name
      :type: str

      Name of the compression algorithm that is being controlled.
      Should be unique to identify the controller and its state among other controllers and their states.


   .. py:property:: compression_rate
      :type: float

      Returns a float compression rate value ranging from 0 to 1 (e.g. the sparsity level,
      or the ratio of filters pruned).


   .. py:property:: maximal_compression_rate
      :type: float

      Returns the maximal model compression rate supported by the compression controller.


   .. py:method:: export_model(save_path, save_format = None, input_names = None, output_names = None, model_args = None)

      Exports the compressed model to the specified format for deployment.

      Makes method-specific preparations of the model, (e.g. removing auxiliary
      layers that were used for the model compression), then exports the model to
      the specified path.

      :param save_path: The path where the model will be saved.
      :param save_format: Saving format. The default format will
          be used if `save_format` is not specified.
      :param input_names: Names to be assigned to the input tensors of the model.
      :param output_names: Names to be assigned to the output tensors of the model.
      :param model_args: Tuple of additional positional and keyword arguments
          which are required for the model's forward during export. Should be
          specified in the following format:
              - (a, b, {'x': None, 'y': y}) for positional and keyword arguments.
              - (a, b, {}) for positional arguments only.
              - ({'x': None, 'y': y},) for keyword arguments only.


   .. py:method:: disable_scheduler()

      Disables current compression scheduler during training by changing it to a dummy one that does not change
      the compression rate.


   .. py:method:: set_builder_state_with_name(name, builder_state)

      Sets state of the builder and the corresponding algorithm name. Should be called by the builder to set its
      state and registered algorithm key.

      :param name: algorithm name, the string that was used to register the builder
      :param builder_state: state of the builder


   .. py:method:: load_state(state)

      Loads the compression controller state from the map of algorithm name to the dictionary with state attributes.

      :param state: map of the algorithm name to the dictionary with the corresponding state attributes.


   .. py:method:: get_state()

      Returns compression controller state, which is the map of the algorithm name to the dictionary with the
      corresponding state attributes.

      :return: The compression controller state.


   .. py:method:: get_compression_state()

      Returns compression state - builder and controller state.
      This state should be used to resume compression via `compression_state` argument of `create_compressed_model`
      method.

      :return: The compression state.



