:py:mod:`nncf.torch.pruning.filter_pruning.algo`
================================================

.. py:module:: nncf.torch.pruning.filter_pruning.algo



Classes
~~~~~~~

.. autoapisummary::

   nncf.torch.pruning.filter_pruning.algo.FilterPruningController




.. py:class:: FilterPruningController(target_model, prunable_types, pruned_module_groups, pruned_norms_operators, config)

   Bases: :py:obj:`nncf.torch.pruning.base_algo.BasePruningAlgoController`

   Serves as a handle to the additional modules, parameters and hooks inserted
   into the original uncompressed model in order to enable algorithm-specific compression.
   Hosts entities that are to be used during the training process, such as compression scheduler and
   compression loss.

   .. py:property:: loss
      :type: nncf.api.compression.CompressionLoss

      The compression loss for this particular algorithm combination.


   .. py:property:: scheduler
      :type: nncf.common.pruning.schedulers.PruningScheduler

      The compression scheduler for this particular algorithm combination.


   .. py:property:: pruning_level
      :type: float

      Global pruning level in the model


   .. py:property:: current_groupwise_pruning_level
      :type: Dict[int, float]

      Return the dict of layer group id's and corresponding current groupwise
      pruning levels in the model


   .. py:property:: compression_rate

      Returns a float compression rate value ranging from 0 to 1 (e.g. the sparsity level,
      or the ratio of filters pruned).


   .. py:property:: maximal_compression_rate
      :type: float

      Returns the maximal model compression rate supported by the compression controller.


   .. py:method:: get_mask(minfo)
      :staticmethod:

      Returns pruning mask for minfo.module.


   .. py:method:: statistics(quickly_collected_only = False)

      Returns a `NNCFStatistics` class instance that contains compression algorithm statistics.

      :param quickly_collected_only: Enables collection of the statistics that
          don't take too much time to compute. Can be helpful for the case when
          need to keep track of statistics on each training batch/step/iteration.


   .. py:method:: set_pruning_level(pruning_level, run_batchnorm_adaptation = False)

      Set the global or groupwise pruning level in the model.
      If pruning_level is a float, the corresponding global pruning level is set in the model,
      either in terms of the percentage of filters pruned or as the percentage of flops
      removed, the latter being true in case the "prune_flops" flag of the controller is
      set to True.
      If pruning_level is a dict, the keys should correspond to layer group id's and the
      values to groupwise pruning level to be set in the model.


   .. py:method:: prepare_for_export()

      Applies pruning masks to layer weights before exporting the model to ONNX.


   .. py:method:: compression_stage()

      Returns the compression stage. Should be used on saving best checkpoints
      to distinguish between uncompressed, partially compressed, and fully
      compressed models.

      :return: The compression stage of the target model.


   .. py:method:: disable_scheduler()

      Disables current compression scheduler during training by changing it to a dummy one that does not change
      the compression rate.


   .. py:method:: strip_model(model, do_copy = False, strip_format = StripFormat.NATIVE)

      Strips auxiliary layers that were used for the model compression, as it's
      only needed for training. The method is used before exporting the model
      in the target format.

      :param model: The compressed model.
      :param do_copy: Modify copy of the model, defaults to False.
      :param strip format: Describes the format in which model is saved after strip.
      :return: The stripped model.



