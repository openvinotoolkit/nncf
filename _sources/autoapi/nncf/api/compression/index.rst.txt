:py:mod:`nncf.api.compression`
==============================

.. py:module:: nncf.api.compression



Classes
~~~~~~~

.. autoapisummary::

   nncf.api.compression.CompressionLoss
   nncf.api.compression.CompressionScheduler
   nncf.api.compression.CompressionStage
   nncf.api.compression.CompressionAlgorithmController
   nncf.api.compression.CompressionAlgorithmBuilder




.. py:class:: CompressionLoss

   Bases: :py:obj:`abc.ABC`

   Used to calculate the additional loss to be added to the base loss during the
   training process. It uses the model graph to measure variables and activations
   values of the layers during the loss construction. For example, the $L_0$-based
   sparsity algorithm calculates the number of non-zero weights in convolutional
   and fully-connected layers to construct the loss function.

   .. py:method:: calculate(*args, **kwargs)
      :abstractmethod:

      Calculates and returns the compression loss value.


   .. py:method:: load_state(state)
      :abstractmethod:

      Loads the compression loss state.

      :param state: The state of the compression loss, most likely obtained as the result of a `.get_state()` method
          call.


   .. py:method:: get_state()
      :abstractmethod:

      Returns the compression loss state.


   .. py:method:: __call__(*args, **kwargs)

      Calculates and returns the compression loss value. Same as `.calculate()`.



.. py:class:: CompressionScheduler

   Bases: :py:obj:`abc.ABC`

   Implements the logic of compression method control during the training process.
   May change the method hyperparameters in regard to the current training step
   or epoch. For example, the sparsity method can smoothly increase the sparsity
   rate over several epochs.

   The `step()` and `epoch_step()` methods of the compression scheduler must be
   called at the beginning of each training step and epoch, respectively:

   ..  code-block:: python

       for epoch in range(0, num_epochs):
           scheduler.epoch_step()
           for i, (x, y) in enumerate(dataset):
                scheduler.step()
                ...


   .. py:method:: step(next_step = None)
      :abstractmethod:

      Should be called at the beginning of each training step to prepare
      the compression method to continue training the model in the `next_step`.

      :param next_step: The global step index for which the compression scheduler
          will update the state of the compression method.


   .. py:method:: epoch_step(next_epoch = None)
      :abstractmethod:

      Should be called at the beginning of each training epoch to prepare
      the compression method to continue training the model in the `next_epoch`.

      :param next_epoch: The epoch index for which the compression scheduler
          will update the state of the compression method.


   .. py:method:: load_state(state)
      :abstractmethod:

      Loads the compression scheduler state, but does not update the state of the
      compression method.

      :param state: Output of `get_state()` method.


   .. py:method:: get_state()
      :abstractmethod:

      Returns the compression scheduler state.



.. py:class:: CompressionStage

   Bases: :py:obj:`enum.IntEnum`

   Specifies the compression stage for the model.

   .. py:method:: __add__(other)

      Defines compression stage of a composite compression controller, consist of
      two algorithms, where `self` is the compression stage of the first algorithm
      and other - compression stage of the second one.

      * ``UNCOMPRESSED         & UNCOMPRESSED         == UNCOMPRESSED``
      * ``PARTIALLY_COMPRESSED & PARTIALLY_COMPRESSED == PARTIALLY_COMPRESSED``
      * ``FULLY_COMPRESSED     & FULLY_COMPRESSED     == FULLY_COMPRESSED``
      * ``UNCOMPRESSED         & PARTIALLY_COMPRESSED == PARTIALLY_COMPRESSED``
      * ``UNCOMPRESSED         & FULLY_COMPRESSED     == PARTIALLY_COMPRESSED``
      * ``PARTIALLY_COMPRESSED & FULLY_COMPRESSED     == PARTIALLY_COMPRESSED``

      :param other: An instance of another compression stage.
      :return: The common compression stage of the two algorithms.



.. py:class:: CompressionAlgorithmController(target_model)

   Bases: :py:obj:`abc.ABC`

   A handle to the compression-specific modifications made to the model.
   Hosts entities that are to be used during the training process, such as compression scheduler and compression loss.

   :param target_model: The model with additional modifications necessary
       to enable algorithm-specific compression during fine-tuning built by the `CompressionAlgorithmBuilder`.

   .. py:property:: model
      :type: TModel

      The compressed model object with which this controller is associated.


   .. py:property:: loss
      :type: CompressionLoss
      :abstractmethod:

      The compression loss for this particular algorithm combination.


   .. py:property:: scheduler
      :type: CompressionScheduler
      :abstractmethod:

      The compression scheduler for this particular algorithm combination.


   .. py:property:: name
      :type: str
      :abstractmethod:

      Name of the compression algorithm that is being controlled.
      Should be unique to identify the controller and its state among other controllers and their states.


   .. py:property:: compression_rate
      :type: float
      :abstractmethod:

      Returns a float compression rate value ranging from 0 to 1 (e.g. the sparsity level,
      or the ratio of filters pruned).


   .. py:property:: maximal_compression_rate
      :type: float
      :abstractmethod:

      Returns the maximal model compression rate supported by the compression controller.


   .. py:method:: load_state(state)
      :abstractmethod:

      Loads the compression controller state from the map of algorithm name to the dictionary with state attributes.

      :param state: map of the algorithm name to the dictionary with the corresponding state attributes.


   .. py:method:: get_state()
      :abstractmethod:

      Returns the compression controller state, which is the map of the algorithm name to the dictionary with the
      corresponding state attributes.


   .. py:method:: get_compression_state()
      :abstractmethod:

      Returns the compression state - builder and controller state.
      This state should be used to unambiguously resume compression via `compression_state` argument of
      `create_compressed_model` method.

      :return: Compression state of the model to  resume compression from it.


   .. py:method:: compression_stage()
      :abstractmethod:

      Returns the compression stage. Should be used on saving best checkpoints
      to distinguish between uncompressed, partially compressed, and fully
      compressed models.

      :return: The compression stage of the target model.


   .. py:method:: statistics(quickly_collected_only = False)
      :abstractmethod:

      Returns a `NNCFStatistics` class instance that contains compression algorithm statistics.

      :param quickly_collected_only: Enables collection of the statistics that
          don't take too much time to compute. Can be helpful for the case when
          need to keep track of statistics on each training batch/step/iteration.


   .. py:method:: strip_model(model, do_copy = False, strip_format = StripFormat.NATIVE)

      Strips auxiliary layers that were used for the model compression, as it's
      only needed for training. The method is used before exporting the model
      in the target format.

      :param model: The compressed model.
      :param do_copy: Modify copy of the model, defaults to False.
      :param strip format: Describes the format in which model is saved after strip.
      :return: The stripped model.


   .. py:method:: prepare_for_export()

      Prepare the compressed model for exporting to a backend-specific model serialization format.


   .. py:method:: strip(do_copy = True, strip_format = StripFormat.NATIVE)

      Removes auxiliary layers and operations added during the compression process, resulting in a clean
      model ready for deployment. The functionality of the model object is still preserved as a compressed model.

      :param do_copy: If True (default), will return a copy of the currently associated model object. If False,
        will return the currently associated model object "stripped" in-place.
      :param strip format: Describes the format in which model is saved after strip.
      :return: The stripped model.


   .. py:method:: export_model(save_path, save_format = None, input_names = None, output_names = None, model_args = None)
      :abstractmethod:

      Exports the compressed model to the specified format for deployment.

      Makes method-specific preparations of the model, (e.g. removing auxiliary
      layers that were used for the model compression), then exports the model to
      the specified path.

      :param save_path: The path where the model will be saved.
      :param save_format: Saving format. The default format will
          be used if `save_format` is not specified.
      :param input_names: Names to be assigned to the input tensors of the model.
      :param output_names: Names to be assigned to the output tensors of the model.
      :param model_args: Tuple of additional positional and keyword arguments
          which are required for the model's forward during export. Should be
          specified in the following format:

          * (a, b, {'x': None, 'y': y}) for positional and keyword arguments.
          * (a, b, {}) for positional arguments only.
          * ({'x': None, 'y': y},) for keyword arguments only.


   .. py:method:: disable_scheduler()
      :abstractmethod:

      Disables current compression scheduler during training by changing it to a dummy one that does not change
      the compression rate.



.. py:class:: CompressionAlgorithmBuilder

   Bases: :py:obj:`abc.ABC`

   Determines which modifications should be made to the original model in order to enable algorithm-specific
   compression during fine-tuning.

   .. py:property:: name
      :type: str
      :abstractmethod:

      :return: name of the compression algorithm that is being built. Should be unique to identify the builder
      and its state among other builders and their states.


   .. py:method:: apply_to(model)
      :abstractmethod:

      Applies algorithm-specific modifications to the model.

      :param model: The original uncompressed model.
      :return: The model with additional modifications necessary to enable
          algorithm-specific compression during fine-tuning.


   .. py:method:: build_controller(model)
      :abstractmethod:

      Builds an instance of algorithm-specific `nncf.api.compression.CompressionAlgorithmController`
      to handle the additional modules, parameters, and hooks inserted into the model to enable algorithm-specific
      compression.

      :param model: The model with additional modifications necessary to enable
          algorithm-specific compression during fine-tuning.
      :return: The instance of a `CompressionAlgorithmController`-derived class, specific for this algorithm.


   .. py:method:: get_transformation_layout(model)
      :abstractmethod:

      Computes necessary model transformations to enable algorithm-specific
      compression.

      :param model: The original uncompressed model.
      :return: The instance of the `TransformationLayout` class containing
          a list of algorithm-specific modifications.


   .. py:method:: initialize(model)
      :abstractmethod:

      Initialize model parameters before training.

      :param model: The model with additional modifications necessary to enable
          algorithm-specific compression during fine-tuning.


   .. py:method:: load_state(state)
      :abstractmethod:

      Initializes object from the supplied state.

      :param state: The state of the builder, most likely obtained as the result of a `.get_state()` call.


   .. py:method:: get_state()
      :abstractmethod:

      Returns a dictionary with Python data structures (dict, list, tuple, str, int, float, True, False, None) that
      represents state of the object.



