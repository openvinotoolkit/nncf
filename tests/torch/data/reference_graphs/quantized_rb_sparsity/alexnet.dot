strict digraph  {
"0 /nncf_model_input_0" [id=0, type=nncf_model_input];
"1 SymmetricQuantizer/symmetric_quantize_0" [id=1, type=symmetric_quantize];
"2 AlexNet/Sequential[features]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask_0" [id=2, type=calc_rb_binary_mask];
"3 AlexNet/Sequential[features]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0" [id=3, type=apply_binary_mask];
"4 AlexNet/Sequential[features]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0" [id=4, type=symmetric_quantize];
"5 AlexNet/Sequential[features]/NNCFConv2d[0]/conv2d_0" [id=5, type=conv2d];
"6 AlexNet/Sequential[features]/ReLU[1]/relu__0" [id=6, type=relu_];
"7 AlexNet/Sequential[features]/ReLU[1]/SymmetricQuantizer/symmetric_quantize_0" [id=7, type=symmetric_quantize];
"8 AlexNet/Sequential[features]/MaxPool2d[2]/max_pool2d_0" [id=8, type=max_pool2d];
"9 AlexNet/Sequential[features]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask_0" [id=9, type=calc_rb_binary_mask];
"10 AlexNet/Sequential[features]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0" [id=10, type=apply_binary_mask];
"11 AlexNet/Sequential[features]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0" [id=11, type=symmetric_quantize];
"12 AlexNet/Sequential[features]/NNCFConv2d[3]/conv2d_0" [id=12, type=conv2d];
"13 AlexNet/Sequential[features]/ReLU[4]/relu__0" [id=13, type=relu_];
"14 AlexNet/Sequential[features]/ReLU[4]/SymmetricQuantizer/symmetric_quantize_0" [id=14, type=symmetric_quantize];
"15 AlexNet/Sequential[features]/MaxPool2d[5]/max_pool2d_0" [id=15, type=max_pool2d];
"16 AlexNet/Sequential[features]/NNCFConv2d[6]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask_0" [id=16, type=calc_rb_binary_mask];
"17 AlexNet/Sequential[features]/NNCFConv2d[6]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0" [id=17, type=apply_binary_mask];
"18 AlexNet/Sequential[features]/NNCFConv2d[6]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0" [id=18, type=symmetric_quantize];
"19 AlexNet/Sequential[features]/NNCFConv2d[6]/conv2d_0" [id=19, type=conv2d];
"20 AlexNet/Sequential[features]/ReLU[7]/relu__0" [id=20, type=relu_];
"21 AlexNet/Sequential[features]/ReLU[7]/SymmetricQuantizer/symmetric_quantize_0" [id=21, type=symmetric_quantize];
"22 AlexNet/Sequential[features]/NNCFConv2d[8]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask_0" [id=22, type=calc_rb_binary_mask];
"23 AlexNet/Sequential[features]/NNCFConv2d[8]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0" [id=23, type=apply_binary_mask];
"24 AlexNet/Sequential[features]/NNCFConv2d[8]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0" [id=24, type=symmetric_quantize];
"25 AlexNet/Sequential[features]/NNCFConv2d[8]/conv2d_0" [id=25, type=conv2d];
"26 AlexNet/Sequential[features]/ReLU[9]/relu__0" [id=26, type=relu_];
"27 AlexNet/Sequential[features]/ReLU[9]/SymmetricQuantizer/symmetric_quantize_0" [id=27, type=symmetric_quantize];
"28 AlexNet/Sequential[features]/NNCFConv2d[10]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask_0" [id=28, type=calc_rb_binary_mask];
"29 AlexNet/Sequential[features]/NNCFConv2d[10]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0" [id=29, type=apply_binary_mask];
"30 AlexNet/Sequential[features]/NNCFConv2d[10]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0" [id=30, type=symmetric_quantize];
"31 AlexNet/Sequential[features]/NNCFConv2d[10]/conv2d_0" [id=31, type=conv2d];
"32 AlexNet/Sequential[features]/ReLU[11]/relu__0" [id=32, type=relu_];
"33 AlexNet/Sequential[features]/ReLU[11]/SymmetricQuantizer/symmetric_quantize_0" [id=33, type=symmetric_quantize];
"34 AlexNet/Sequential[features]/MaxPool2d[12]/max_pool2d_0" [id=34, type=max_pool2d];
"35 AlexNet/view_0" [id=35, type=view];
"36 AlexNet/Sequential[classifier]/Dropout[0]/dropout_0" [id=36, type=dropout];
"37 AlexNet/Sequential[classifier]/NNCFLinear[1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask_0" [id=37, type=calc_rb_binary_mask];
"38 AlexNet/Sequential[classifier]/NNCFLinear[1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0" [id=38, type=apply_binary_mask];
"39 AlexNet/Sequential[classifier]/NNCFLinear[1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0" [id=39, type=symmetric_quantize];
"40 AlexNet/Sequential[classifier]/NNCFLinear[1]/linear_0" [id=40, type=linear];
"41 AlexNet/Sequential[classifier]/ReLU[2]/relu__0" [id=41, type=relu_];
"42 AlexNet/Sequential[classifier]/ReLU[2]/SymmetricQuantizer/symmetric_quantize_0" [id=42, type=symmetric_quantize];
"43 AlexNet/Sequential[classifier]/Dropout[3]/dropout_0" [id=43, type=dropout];
"44 AlexNet/Sequential[classifier]/NNCFLinear[4]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask_0" [id=44, type=calc_rb_binary_mask];
"45 AlexNet/Sequential[classifier]/NNCFLinear[4]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0" [id=45, type=apply_binary_mask];
"46 AlexNet/Sequential[classifier]/NNCFLinear[4]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0" [id=46, type=symmetric_quantize];
"47 AlexNet/Sequential[classifier]/NNCFLinear[4]/linear_0" [id=47, type=linear];
"48 AlexNet/Sequential[classifier]/ReLU[5]/relu__0" [id=48, type=relu_];
"49 AlexNet/Sequential[classifier]/ReLU[5]/SymmetricQuantizer/symmetric_quantize_0" [id=49, type=symmetric_quantize];
"50 AlexNet/Sequential[classifier]/NNCFLinear[6]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask_0" [id=50, type=calc_rb_binary_mask];
"51 AlexNet/Sequential[classifier]/NNCFLinear[6]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0" [id=51, type=apply_binary_mask];
"52 AlexNet/Sequential[classifier]/NNCFLinear[6]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0" [id=52, type=symmetric_quantize];
"53 AlexNet/Sequential[classifier]/NNCFLinear[6]/linear_0" [id=53, type=linear];
"54 /nncf_model_output_0" [id=54, type=nncf_model_output];
"0 /nncf_model_input_0" -> "1 SymmetricQuantizer/symmetric_quantize_0";
"1 SymmetricQuantizer/symmetric_quantize_0" -> "5 AlexNet/Sequential[features]/NNCFConv2d[0]/conv2d_0";
"2 AlexNet/Sequential[features]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask_0" -> "3 AlexNet/Sequential[features]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0";
"3 AlexNet/Sequential[features]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0" -> "4 AlexNet/Sequential[features]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0";
"4 AlexNet/Sequential[features]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0" -> "5 AlexNet/Sequential[features]/NNCFConv2d[0]/conv2d_0";
"5 AlexNet/Sequential[features]/NNCFConv2d[0]/conv2d_0" -> "6 AlexNet/Sequential[features]/ReLU[1]/relu__0";
"6 AlexNet/Sequential[features]/ReLU[1]/relu__0" -> "7 AlexNet/Sequential[features]/ReLU[1]/SymmetricQuantizer/symmetric_quantize_0";
"7 AlexNet/Sequential[features]/ReLU[1]/SymmetricQuantizer/symmetric_quantize_0" -> "8 AlexNet/Sequential[features]/MaxPool2d[2]/max_pool2d_0";
"8 AlexNet/Sequential[features]/MaxPool2d[2]/max_pool2d_0" -> "12 AlexNet/Sequential[features]/NNCFConv2d[3]/conv2d_0";
"9 AlexNet/Sequential[features]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask_0" -> "10 AlexNet/Sequential[features]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0";
"10 AlexNet/Sequential[features]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0" -> "11 AlexNet/Sequential[features]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0";
"11 AlexNet/Sequential[features]/NNCFConv2d[3]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0" -> "12 AlexNet/Sequential[features]/NNCFConv2d[3]/conv2d_0";
"12 AlexNet/Sequential[features]/NNCFConv2d[3]/conv2d_0" -> "13 AlexNet/Sequential[features]/ReLU[4]/relu__0";
"13 AlexNet/Sequential[features]/ReLU[4]/relu__0" -> "14 AlexNet/Sequential[features]/ReLU[4]/SymmetricQuantizer/symmetric_quantize_0";
"14 AlexNet/Sequential[features]/ReLU[4]/SymmetricQuantizer/symmetric_quantize_0" -> "15 AlexNet/Sequential[features]/MaxPool2d[5]/max_pool2d_0";
"15 AlexNet/Sequential[features]/MaxPool2d[5]/max_pool2d_0" -> "19 AlexNet/Sequential[features]/NNCFConv2d[6]/conv2d_0";
"16 AlexNet/Sequential[features]/NNCFConv2d[6]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask_0" -> "17 AlexNet/Sequential[features]/NNCFConv2d[6]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0";
"17 AlexNet/Sequential[features]/NNCFConv2d[6]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0" -> "18 AlexNet/Sequential[features]/NNCFConv2d[6]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0";
"18 AlexNet/Sequential[features]/NNCFConv2d[6]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0" -> "19 AlexNet/Sequential[features]/NNCFConv2d[6]/conv2d_0";
"19 AlexNet/Sequential[features]/NNCFConv2d[6]/conv2d_0" -> "20 AlexNet/Sequential[features]/ReLU[7]/relu__0";
"20 AlexNet/Sequential[features]/ReLU[7]/relu__0" -> "21 AlexNet/Sequential[features]/ReLU[7]/SymmetricQuantizer/symmetric_quantize_0";
"21 AlexNet/Sequential[features]/ReLU[7]/SymmetricQuantizer/symmetric_quantize_0" -> "25 AlexNet/Sequential[features]/NNCFConv2d[8]/conv2d_0";
"22 AlexNet/Sequential[features]/NNCFConv2d[8]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask_0" -> "23 AlexNet/Sequential[features]/NNCFConv2d[8]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0";
"23 AlexNet/Sequential[features]/NNCFConv2d[8]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0" -> "24 AlexNet/Sequential[features]/NNCFConv2d[8]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0";
"24 AlexNet/Sequential[features]/NNCFConv2d[8]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0" -> "25 AlexNet/Sequential[features]/NNCFConv2d[8]/conv2d_0";
"25 AlexNet/Sequential[features]/NNCFConv2d[8]/conv2d_0" -> "26 AlexNet/Sequential[features]/ReLU[9]/relu__0";
"26 AlexNet/Sequential[features]/ReLU[9]/relu__0" -> "27 AlexNet/Sequential[features]/ReLU[9]/SymmetricQuantizer/symmetric_quantize_0";
"27 AlexNet/Sequential[features]/ReLU[9]/SymmetricQuantizer/symmetric_quantize_0" -> "31 AlexNet/Sequential[features]/NNCFConv2d[10]/conv2d_0";
"28 AlexNet/Sequential[features]/NNCFConv2d[10]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask_0" -> "29 AlexNet/Sequential[features]/NNCFConv2d[10]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0";
"29 AlexNet/Sequential[features]/NNCFConv2d[10]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0" -> "30 AlexNet/Sequential[features]/NNCFConv2d[10]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0";
"30 AlexNet/Sequential[features]/NNCFConv2d[10]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0" -> "31 AlexNet/Sequential[features]/NNCFConv2d[10]/conv2d_0";
"31 AlexNet/Sequential[features]/NNCFConv2d[10]/conv2d_0" -> "32 AlexNet/Sequential[features]/ReLU[11]/relu__0";
"32 AlexNet/Sequential[features]/ReLU[11]/relu__0" -> "33 AlexNet/Sequential[features]/ReLU[11]/SymmetricQuantizer/symmetric_quantize_0";
"33 AlexNet/Sequential[features]/ReLU[11]/SymmetricQuantizer/symmetric_quantize_0" -> "34 AlexNet/Sequential[features]/MaxPool2d[12]/max_pool2d_0";
"34 AlexNet/Sequential[features]/MaxPool2d[12]/max_pool2d_0" -> "35 AlexNet/view_0";
"35 AlexNet/view_0" -> "36 AlexNet/Sequential[classifier]/Dropout[0]/dropout_0";
"36 AlexNet/Sequential[classifier]/Dropout[0]/dropout_0" -> "40 AlexNet/Sequential[classifier]/NNCFLinear[1]/linear_0";
"37 AlexNet/Sequential[classifier]/NNCFLinear[1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask_0" -> "38 AlexNet/Sequential[classifier]/NNCFLinear[1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0";
"38 AlexNet/Sequential[classifier]/NNCFLinear[1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0" -> "39 AlexNet/Sequential[classifier]/NNCFLinear[1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0";
"39 AlexNet/Sequential[classifier]/NNCFLinear[1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0" -> "40 AlexNet/Sequential[classifier]/NNCFLinear[1]/linear_0";
"40 AlexNet/Sequential[classifier]/NNCFLinear[1]/linear_0" -> "41 AlexNet/Sequential[classifier]/ReLU[2]/relu__0";
"41 AlexNet/Sequential[classifier]/ReLU[2]/relu__0" -> "42 AlexNet/Sequential[classifier]/ReLU[2]/SymmetricQuantizer/symmetric_quantize_0";
"42 AlexNet/Sequential[classifier]/ReLU[2]/SymmetricQuantizer/symmetric_quantize_0" -> "43 AlexNet/Sequential[classifier]/Dropout[3]/dropout_0";
"43 AlexNet/Sequential[classifier]/Dropout[3]/dropout_0" -> "47 AlexNet/Sequential[classifier]/NNCFLinear[4]/linear_0";
"44 AlexNet/Sequential[classifier]/NNCFLinear[4]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask_0" -> "45 AlexNet/Sequential[classifier]/NNCFLinear[4]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0";
"45 AlexNet/Sequential[classifier]/NNCFLinear[4]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0" -> "46 AlexNet/Sequential[classifier]/NNCFLinear[4]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0";
"46 AlexNet/Sequential[classifier]/NNCFLinear[4]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0" -> "47 AlexNet/Sequential[classifier]/NNCFLinear[4]/linear_0";
"47 AlexNet/Sequential[classifier]/NNCFLinear[4]/linear_0" -> "48 AlexNet/Sequential[classifier]/ReLU[5]/relu__0";
"48 AlexNet/Sequential[classifier]/ReLU[5]/relu__0" -> "49 AlexNet/Sequential[classifier]/ReLU[5]/SymmetricQuantizer/symmetric_quantize_0";
"49 AlexNet/Sequential[classifier]/ReLU[5]/SymmetricQuantizer/symmetric_quantize_0" -> "53 AlexNet/Sequential[classifier]/NNCFLinear[6]/linear_0";
"50 AlexNet/Sequential[classifier]/NNCFLinear[6]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask_0" -> "51 AlexNet/Sequential[classifier]/NNCFLinear[6]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0";
"51 AlexNet/Sequential[classifier]/NNCFLinear[6]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask_0" -> "52 AlexNet/Sequential[classifier]/NNCFLinear[6]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0";
"52 AlexNet/Sequential[classifier]/NNCFLinear[6]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize_0" -> "53 AlexNet/Sequential[classifier]/NNCFLinear[6]/linear_0";
"53 AlexNet/Sequential[classifier]/NNCFLinear[6]/linear_0" -> "54 /nncf_model_output_0";
}
