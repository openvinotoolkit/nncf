strict digraph  {
"0 /nncf_model_input" [id=0, scope="", type=nncf_model_input];
"1 SymmetricQuantizer/symmetric_quantize" [id=1, scope=SymmetricQuantizer, type=symmetric_quantize];
"2 /nncf_model_input" [id=2, scope="", type=nncf_model_input];
"3 SymmetricQuantizer/symmetric_quantize" [id=3, scope=SymmetricQuantizer, type=symmetric_quantize];
"4 SmallModel/NNCFConv2d[conv_cubic1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=4, scope="SmallModel/NNCFConv2d[conv_cubic1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"5 SmallModel/NNCFConv2d[conv_cubic1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=5, scope="SmallModel/NNCFConv2d[conv_cubic1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"6 SmallModel/NNCFConv2d[conv_cubic1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=6, scope="SmallModel/NNCFConv2d[conv_cubic1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"7 SmallModel/NNCFConv2d[conv_cubic1]/conv2d" [id=7, scope="SmallModel/NNCFConv2d[conv_cubic1]", type=conv2d];
"8 SmallModel/ReLU[relu]/RELU" [id=8, scope="SmallModel/ReLU[relu]", type=RELU];
"9 SmallModel/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" [id=9, scope="SmallModel/ReLU[relu]/SymmetricQuantizer", type=symmetric_quantize];
"10 SmallModel/NNCFConv2d[conv_cubic2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=10, scope="SmallModel/NNCFConv2d[conv_cubic2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"11 SmallModel/NNCFConv2d[conv_cubic2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=11, scope="SmallModel/NNCFConv2d[conv_cubic2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"12 SmallModel/NNCFConv2d[conv_cubic2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=12, scope="SmallModel/NNCFConv2d[conv_cubic2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"13 SmallModel/NNCFConv2d[conv_cubic2]/conv2d" [id=13, scope="SmallModel/NNCFConv2d[conv_cubic2]", type=conv2d];
"14 SmallModel/Sigmoid[sigmoid]/sigmoid" [id=14, scope="SmallModel/Sigmoid[sigmoid]", type=sigmoid];
"15 SmallModel/Sigmoid[sigmoid]/SymmetricQuantizer/symmetric_quantize" [id=15, scope="SmallModel/Sigmoid[sigmoid]/SymmetricQuantizer", type=symmetric_quantize];
"16 SmallModel/NNCFConv2d[conv_input]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=16, scope="SmallModel/NNCFConv2d[conv_input]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"17 SmallModel/NNCFConv2d[conv_input]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=17, scope="SmallModel/NNCFConv2d[conv_input]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"18 SmallModel/NNCFConv2d[conv_input]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=18, scope="SmallModel/NNCFConv2d[conv_input]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"19 SmallModel/NNCFConv2d[conv_input]/conv2d" [id=19, scope="SmallModel/NNCFConv2d[conv_input]", type=conv2d];
"20 SmallModel/ReLU[relu]/RELU" [id=20, scope="SmallModel/ReLU[relu]", type=RELU];
"21 SmallModel/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" [id=21, scope="SmallModel/ReLU[relu]/SymmetricQuantizer", type=symmetric_quantize];
"22 SmallModel/SmallBlock[residual1]/ReLU[relu]/RELU" [id=22, scope="SmallModel/SmallBlock[residual1]/ReLU[relu]", type=RELU];
"23 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=23, scope="SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"24 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=24, scope="SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"25 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=25, scope="SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"26 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/conv2d" [id=26, scope="SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]", type=conv2d];
"27 SmallModel/SmallBlock[residual1]/ReLU[relu]/RELU" [id=27, scope="SmallModel/SmallBlock[residual1]/ReLU[relu]", type=RELU];
"28 SmallModel/SmallBlock[residual1]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" [id=28, scope="SmallModel/SmallBlock[residual1]/ReLU[relu]/SymmetricQuantizer", type=symmetric_quantize];
"29 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=29, scope="SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"30 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=30, scope="SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"31 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=31, scope="SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"32 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/conv2d" [id=32, scope="SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]", type=conv2d];
"33 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize" [id=33, scope="SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/SymmetricQuantizer", type=symmetric_quantize];
"34 SmallModel/SmallBlock[residual1]/add" [id=34, scope="SmallModel/SmallBlock[residual1]", type=add];
"35 SmallModel/SmallBlock[residual1]/SymmetricQuantizer/symmetric_quantize" [id=35, scope="SmallModel/SmallBlock[residual1]/SymmetricQuantizer", type=symmetric_quantize];
"36 SmallModel/SmallBlock[residual2]/ReLU[relu]/RELU" [id=36, scope="SmallModel/SmallBlock[residual2]/ReLU[relu]", type=RELU];
"37 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=37, scope="SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"38 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=38, scope="SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"39 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=39, scope="SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"40 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/conv2d" [id=40, scope="SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]", type=conv2d];
"41 SmallModel/SmallBlock[residual2]/ReLU[relu]/RELU" [id=41, scope="SmallModel/SmallBlock[residual2]/ReLU[relu]", type=RELU];
"42 SmallModel/SmallBlock[residual2]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" [id=42, scope="SmallModel/SmallBlock[residual2]/ReLU[relu]/SymmetricQuantizer", type=symmetric_quantize];
"43 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=43, scope="SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"44 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=44, scope="SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"45 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=45, scope="SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"46 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/conv2d" [id=46, scope="SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]", type=conv2d];
"47 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize" [id=47, scope="SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/SymmetricQuantizer", type=symmetric_quantize];
"48 SmallModel/SmallBlock[residual2]/add" [id=48, scope="SmallModel/SmallBlock[residual2]", type=add];
"49 SmallModel/SmallBlock[residual2]/SymmetricQuantizer/symmetric_quantize" [id=49, scope="SmallModel/SmallBlock[residual2]/SymmetricQuantizer", type=symmetric_quantize];
"50 SmallModel/SmallBlock[residual3]/ReLU[relu]/RELU" [id=50, scope="SmallModel/SmallBlock[residual3]/ReLU[relu]", type=RELU];
"51 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=51, scope="SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"52 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=52, scope="SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"53 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=53, scope="SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"54 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/conv2d" [id=54, scope="SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]", type=conv2d];
"55 SmallModel/SmallBlock[residual3]/ReLU[relu]/RELU" [id=55, scope="SmallModel/SmallBlock[residual3]/ReLU[relu]", type=RELU];
"56 SmallModel/SmallBlock[residual3]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" [id=56, scope="SmallModel/SmallBlock[residual3]/ReLU[relu]/SymmetricQuantizer", type=symmetric_quantize];
"57 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=57, scope="SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"58 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=58, scope="SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"59 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=59, scope="SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"60 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/conv2d" [id=60, scope="SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]", type=conv2d];
"61 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize" [id=61, scope="SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/SymmetricQuantizer", type=symmetric_quantize];
"62 SmallModel/SmallBlock[residual3]/add" [id=62, scope="SmallModel/SmallBlock[residual3]", type=add];
"63 SmallModel/SmallBlock[residual3]/SymmetricQuantizer/symmetric_quantize" [id=63, scope="SmallModel/SmallBlock[residual3]/SymmetricQuantizer", type=symmetric_quantize];
"64 SmallModel/SmallBlock[residual4]/ReLU[relu]/RELU" [id=64, scope="SmallModel/SmallBlock[residual4]/ReLU[relu]", type=RELU];
"65 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=65, scope="SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"66 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=66, scope="SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"67 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=67, scope="SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"68 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/conv2d" [id=68, scope="SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]", type=conv2d];
"69 SmallModel/SmallBlock[residual4]/ReLU[relu]/RELU" [id=69, scope="SmallModel/SmallBlock[residual4]/ReLU[relu]", type=RELU];
"70 SmallModel/SmallBlock[residual4]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" [id=70, scope="SmallModel/SmallBlock[residual4]/ReLU[relu]/SymmetricQuantizer", type=symmetric_quantize];
"71 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=71, scope="SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"72 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=72, scope="SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"73 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=73, scope="SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"74 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/conv2d" [id=74, scope="SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]", type=conv2d];
"75 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize" [id=75, scope="SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/SymmetricQuantizer", type=symmetric_quantize];
"76 SmallModel/SmallBlock[residual4]/add" [id=76, scope="SmallModel/SmallBlock[residual4]", type=add];
"77 SmallModel/SmallBlock[residual4]/SymmetricQuantizer/symmetric_quantize" [id=77, scope="SmallModel/SmallBlock[residual4]/SymmetricQuantizer", type=symmetric_quantize];
"78 SmallModel/cat" [id=78, scope=SmallModel, type=cat];
"79 SmallModel/NNCFConv2d[conv_mid]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=79, scope="SmallModel/NNCFConv2d[conv_mid]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"80 SmallModel/NNCFConv2d[conv_mid]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=80, scope="SmallModel/NNCFConv2d[conv_mid]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"81 SmallModel/NNCFConv2d[conv_mid]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=81, scope="SmallModel/NNCFConv2d[conv_mid]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"82 SmallModel/NNCFConv2d[conv_mid]/conv2d" [id=82, scope="SmallModel/NNCFConv2d[conv_mid]", type=conv2d];
"83 SmallModel/ReLU[relu]/RELU" [id=83, scope="SmallModel/ReLU[relu]", type=RELU];
"84 SmallModel/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" [id=84, scope="SmallModel/ReLU[relu]/SymmetricQuantizer", type=symmetric_quantize];
"85 SmallModel/Sequential[upscale]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=85, scope="SmallModel/Sequential[upscale]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"86 SmallModel/Sequential[upscale]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=86, scope="SmallModel/Sequential[upscale]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"87 SmallModel/Sequential[upscale]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=87, scope="SmallModel/Sequential[upscale]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"88 SmallModel/Sequential[upscale]/NNCFConv2d[0]/conv2d" [id=88, scope="SmallModel/Sequential[upscale]/NNCFConv2d[0]", type=conv2d];
"89 SmallModel/Sequential[upscale]/NNCFConv2d[0]/SymmetricQuantizer/symmetric_quantize" [id=89, scope="SmallModel/Sequential[upscale]/NNCFConv2d[0]/SymmetricQuantizer", type=symmetric_quantize];
"90 SmallModel/Sequential[upscale]/PixelShuffle[1]/pixel_shuffle" [id=90, scope="SmallModel/Sequential[upscale]/PixelShuffle[1]", type=pixel_shuffle];
"91 SmallModel/Sequential[upscale]/PixelShuffle[1]/SymmetricQuantizer/symmetric_quantize" [id=91, scope="SmallModel/Sequential[upscale]/PixelShuffle[1]/SymmetricQuantizer", type=symmetric_quantize];
"92 SmallModel/Sequential[upscale]/ReLU[2]/RELU" [id=92, scope="SmallModel/Sequential[upscale]/ReLU[2]", type=RELU];
"93 SmallModel/NNCFConv2d[conv_output]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=93, scope="SmallModel/NNCFConv2d[conv_output]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"94 SmallModel/NNCFConv2d[conv_output]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=94, scope="SmallModel/NNCFConv2d[conv_output]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"95 SmallModel/NNCFConv2d[conv_output]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=95, scope="SmallModel/NNCFConv2d[conv_output]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"96 SmallModel/NNCFConv2d[conv_output]/conv2d" [id=96, scope="SmallModel/NNCFConv2d[conv_output]", type=conv2d];
"97 SmallModel/NNCFConv2d[conv_output]/SymmetricQuantizer/symmetric_quantize" [id=97, scope="SmallModel/NNCFConv2d[conv_output]/SymmetricQuantizer", type=symmetric_quantize];
"98 SmallModel/__mul__" [id=98, scope=SmallModel, type=__mul__];
"99 SmallModel/SymmetricQuantizer/symmetric_quantize" [id=99, scope="SmallModel/SymmetricQuantizer", type=symmetric_quantize];
"100 SmallModel/add" [id=100, scope=SmallModel, type=add];
"101 SmallModel/NNCFConv2d[conv_cubic1]/conv2d" [id=101, scope="SmallModel/NNCFConv2d[conv_cubic1]", type=conv2d];
"102 SmallModel/ReLU[relu]/RELU" [id=102, scope="SmallModel/ReLU[relu]", type=RELU];
"103 SmallModel/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" [id=103, scope="SmallModel/ReLU[relu]/SymmetricQuantizer", type=symmetric_quantize];
"104 SmallModel/NNCFConv2d[conv_cubic2]/conv2d" [id=104, scope="SmallModel/NNCFConv2d[conv_cubic2]", type=conv2d];
"105 SmallModel/Sigmoid[sigmoid]/sigmoid" [id=105, scope="SmallModel/Sigmoid[sigmoid]", type=sigmoid];
"106 SmallModel/Sigmoid[sigmoid]/SymmetricQuantizer/symmetric_quantize" [id=106, scope="SmallModel/Sigmoid[sigmoid]/SymmetricQuantizer", type=symmetric_quantize];
"107 SmallModel/NNCFConv2d[conv_input]/conv2d" [id=107, scope="SmallModel/NNCFConv2d[conv_input]", type=conv2d];
"108 SmallModel/ReLU[relu]/RELU" [id=108, scope="SmallModel/ReLU[relu]", type=RELU];
"109 SmallModel/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" [id=109, scope="SmallModel/ReLU[relu]/SymmetricQuantizer", type=symmetric_quantize];
"110 SmallModel/SmallBlock[residual1]/ReLU[relu]/RELU" [id=110, scope="SmallModel/SmallBlock[residual1]/ReLU[relu]", type=RELU];
"111 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/conv2d" [id=111, scope="SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]", type=conv2d];
"112 SmallModel/SmallBlock[residual1]/ReLU[relu]/RELU" [id=112, scope="SmallModel/SmallBlock[residual1]/ReLU[relu]", type=RELU];
"113 SmallModel/SmallBlock[residual1]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" [id=113, scope="SmallModel/SmallBlock[residual1]/ReLU[relu]/SymmetricQuantizer", type=symmetric_quantize];
"114 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/conv2d" [id=114, scope="SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]", type=conv2d];
"115 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize" [id=115, scope="SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/SymmetricQuantizer", type=symmetric_quantize];
"116 SmallModel/SmallBlock[residual1]/add" [id=116, scope="SmallModel/SmallBlock[residual1]", type=add];
"117 SmallModel/SmallBlock[residual1]/SymmetricQuantizer/symmetric_quantize" [id=117, scope="SmallModel/SmallBlock[residual1]/SymmetricQuantizer", type=symmetric_quantize];
"118 SmallModel/SmallBlock[residual2]/ReLU[relu]/RELU" [id=118, scope="SmallModel/SmallBlock[residual2]/ReLU[relu]", type=RELU];
"119 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/conv2d" [id=119, scope="SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]", type=conv2d];
"120 SmallModel/SmallBlock[residual2]/ReLU[relu]/RELU" [id=120, scope="SmallModel/SmallBlock[residual2]/ReLU[relu]", type=RELU];
"121 SmallModel/SmallBlock[residual2]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" [id=121, scope="SmallModel/SmallBlock[residual2]/ReLU[relu]/SymmetricQuantizer", type=symmetric_quantize];
"122 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/conv2d" [id=122, scope="SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]", type=conv2d];
"123 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize" [id=123, scope="SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/SymmetricQuantizer", type=symmetric_quantize];
"124 SmallModel/SmallBlock[residual2]/add" [id=124, scope="SmallModel/SmallBlock[residual2]", type=add];
"125 SmallModel/SmallBlock[residual2]/SymmetricQuantizer/symmetric_quantize" [id=125, scope="SmallModel/SmallBlock[residual2]/SymmetricQuantizer", type=symmetric_quantize];
"126 SmallModel/SmallBlock[residual3]/ReLU[relu]/RELU" [id=126, scope="SmallModel/SmallBlock[residual3]/ReLU[relu]", type=RELU];
"127 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/conv2d" [id=127, scope="SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]", type=conv2d];
"128 SmallModel/SmallBlock[residual3]/ReLU[relu]/RELU" [id=128, scope="SmallModel/SmallBlock[residual3]/ReLU[relu]", type=RELU];
"129 SmallModel/SmallBlock[residual3]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" [id=129, scope="SmallModel/SmallBlock[residual3]/ReLU[relu]/SymmetricQuantizer", type=symmetric_quantize];
"130 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/conv2d" [id=130, scope="SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]", type=conv2d];
"131 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize" [id=131, scope="SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/SymmetricQuantizer", type=symmetric_quantize];
"132 SmallModel/SmallBlock[residual3]/add" [id=132, scope="SmallModel/SmallBlock[residual3]", type=add];
"133 SmallModel/SmallBlock[residual3]/SymmetricQuantizer/symmetric_quantize" [id=133, scope="SmallModel/SmallBlock[residual3]/SymmetricQuantizer", type=symmetric_quantize];
"134 SmallModel/SmallBlock[residual4]/ReLU[relu]/RELU" [id=134, scope="SmallModel/SmallBlock[residual4]/ReLU[relu]", type=RELU];
"135 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/conv2d" [id=135, scope="SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]", type=conv2d];
"136 SmallModel/SmallBlock[residual4]/ReLU[relu]/RELU" [id=136, scope="SmallModel/SmallBlock[residual4]/ReLU[relu]", type=RELU];
"137 SmallModel/SmallBlock[residual4]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" [id=137, scope="SmallModel/SmallBlock[residual4]/ReLU[relu]/SymmetricQuantizer", type=symmetric_quantize];
"138 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/conv2d" [id=138, scope="SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]", type=conv2d];
"139 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize" [id=139, scope="SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/SymmetricQuantizer", type=symmetric_quantize];
"140 SmallModel/SmallBlock[residual4]/add" [id=140, scope="SmallModel/SmallBlock[residual4]", type=add];
"141 SmallModel/SmallBlock[residual4]/SymmetricQuantizer/symmetric_quantize" [id=141, scope="SmallModel/SmallBlock[residual4]/SymmetricQuantizer", type=symmetric_quantize];
"142 SmallModel/cat" [id=142, scope=SmallModel, type=cat];
"143 SmallModel/NNCFConv2d[conv_mid]/conv2d" [id=143, scope="SmallModel/NNCFConv2d[conv_mid]", type=conv2d];
"144 SmallModel/ReLU[relu]/RELU" [id=144, scope="SmallModel/ReLU[relu]", type=RELU];
"145 SmallModel/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" [id=145, scope="SmallModel/ReLU[relu]/SymmetricQuantizer", type=symmetric_quantize];
"146 SmallModel/Sequential[upscale]/NNCFConv2d[0]/conv2d" [id=146, scope="SmallModel/Sequential[upscale]/NNCFConv2d[0]", type=conv2d];
"147 SmallModel/Sequential[upscale]/NNCFConv2d[0]/SymmetricQuantizer/symmetric_quantize" [id=147, scope="SmallModel/Sequential[upscale]/NNCFConv2d[0]/SymmetricQuantizer", type=symmetric_quantize];
"148 SmallModel/Sequential[upscale]/PixelShuffle[1]/pixel_shuffle" [id=148, scope="SmallModel/Sequential[upscale]/PixelShuffle[1]", type=pixel_shuffle];
"149 SmallModel/Sequential[upscale]/PixelShuffle[1]/SymmetricQuantizer/symmetric_quantize" [id=149, scope="SmallModel/Sequential[upscale]/PixelShuffle[1]/SymmetricQuantizer", type=symmetric_quantize];
"150 SmallModel/Sequential[upscale]/ReLU[2]/RELU" [id=150, scope="SmallModel/Sequential[upscale]/ReLU[2]", type=RELU];
"151 SmallModel/NNCFConv2d[conv_output]/conv2d" [id=151, scope="SmallModel/NNCFConv2d[conv_output]", type=conv2d];
"152 SmallModel/NNCFConv2d[conv_output]/SymmetricQuantizer/symmetric_quantize" [id=152, scope="SmallModel/NNCFConv2d[conv_output]/SymmetricQuantizer", type=symmetric_quantize];
"153 SmallModel/__mul__" [id=153, scope=SmallModel, type=__mul__];
"154 SmallModel/SymmetricQuantizer/symmetric_quantize" [id=154, scope="SmallModel/SymmetricQuantizer", type=symmetric_quantize];
"155 SmallModel/add" [id=155, scope=SmallModel, type=add];
"0 /nncf_model_input" -> "1 SymmetricQuantizer/symmetric_quantize";
"2 /nncf_model_input" -> "3 SymmetricQuantizer/symmetric_quantize";
"3 SymmetricQuantizer/symmetric_quantize" -> "7 SmallModel/NNCFConv2d[conv_cubic1]/conv2d";
"4 SmallModel/NNCFConv2d[conv_cubic1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "5 SmallModel/NNCFConv2d[conv_cubic1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"5 SmallModel/NNCFConv2d[conv_cubic1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "6 SmallModel/NNCFConv2d[conv_cubic1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"6 SmallModel/NNCFConv2d[conv_cubic1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "7 SmallModel/NNCFConv2d[conv_cubic1]/conv2d";
"7 SmallModel/NNCFConv2d[conv_cubic1]/conv2d" -> "8 SmallModel/ReLU[relu]/RELU";
"8 SmallModel/ReLU[relu]/RELU" -> "9 SmallModel/ReLU[relu]/SymmetricQuantizer/symmetric_quantize";
"1 SymmetricQuantizer/symmetric_quantize" -> "19 SmallModel/NNCFConv2d[conv_input]/conv2d";
"9 SmallModel/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" -> "13 SmallModel/NNCFConv2d[conv_cubic2]/conv2d";
"10 SmallModel/NNCFConv2d[conv_cubic2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "11 SmallModel/NNCFConv2d[conv_cubic2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"11 SmallModel/NNCFConv2d[conv_cubic2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "12 SmallModel/NNCFConv2d[conv_cubic2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"12 SmallModel/NNCFConv2d[conv_cubic2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "13 SmallModel/NNCFConv2d[conv_cubic2]/conv2d";
"13 SmallModel/NNCFConv2d[conv_cubic2]/conv2d" -> "14 SmallModel/Sigmoid[sigmoid]/sigmoid";
"14 SmallModel/Sigmoid[sigmoid]/sigmoid" -> "15 SmallModel/Sigmoid[sigmoid]/SymmetricQuantizer/symmetric_quantize";
"15 SmallModel/Sigmoid[sigmoid]/SymmetricQuantizer/symmetric_quantize" -> "98 SmallModel/__mul__";
"16 SmallModel/NNCFConv2d[conv_input]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "17 SmallModel/NNCFConv2d[conv_input]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"17 SmallModel/NNCFConv2d[conv_input]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "18 SmallModel/NNCFConv2d[conv_input]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"18 SmallModel/NNCFConv2d[conv_input]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "19 SmallModel/NNCFConv2d[conv_input]/conv2d";
"19 SmallModel/NNCFConv2d[conv_input]/conv2d" -> "20 SmallModel/ReLU[relu]/RELU";
"20 SmallModel/ReLU[relu]/RELU" -> "21 SmallModel/ReLU[relu]/SymmetricQuantizer/symmetric_quantize";
"21 SmallModel/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" -> "22 SmallModel/SmallBlock[residual1]/ReLU[relu]/RELU";
"21 SmallModel/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" -> "34 SmallModel/SmallBlock[residual1]/add";
"21 SmallModel/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" -> "78 SmallModel/cat";
"22 SmallModel/SmallBlock[residual1]/ReLU[relu]/RELU" -> "26 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/conv2d";
"23 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "24 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"24 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "25 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"25 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "26 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/conv2d";
"26 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/conv2d" -> "27 SmallModel/SmallBlock[residual1]/ReLU[relu]/RELU";
"27 SmallModel/SmallBlock[residual1]/ReLU[relu]/RELU" -> "28 SmallModel/SmallBlock[residual1]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize";
"28 SmallModel/SmallBlock[residual1]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" -> "32 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/conv2d";
"29 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "30 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"30 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "31 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"3 SymmetricQuantizer/symmetric_quantize" -> "100 SmallModel/add";
"31 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "32 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/conv2d";
"32 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/conv2d" -> "33 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize";
"33 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize" -> "34 SmallModel/SmallBlock[residual1]/add";
"34 SmallModel/SmallBlock[residual1]/add" -> "35 SmallModel/SmallBlock[residual1]/SymmetricQuantizer/symmetric_quantize";
"35 SmallModel/SmallBlock[residual1]/SymmetricQuantizer/symmetric_quantize" -> "36 SmallModel/SmallBlock[residual2]/ReLU[relu]/RELU";
"35 SmallModel/SmallBlock[residual1]/SymmetricQuantizer/symmetric_quantize" -> "48 SmallModel/SmallBlock[residual2]/add";
"35 SmallModel/SmallBlock[residual1]/SymmetricQuantizer/symmetric_quantize" -> "78 SmallModel/cat";
"36 SmallModel/SmallBlock[residual2]/ReLU[relu]/RELU" -> "40 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/conv2d";
"37 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "38 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"38 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "39 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"39 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "40 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/conv2d";
"40 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/conv2d" -> "41 SmallModel/SmallBlock[residual2]/ReLU[relu]/RELU";
"41 SmallModel/SmallBlock[residual2]/ReLU[relu]/RELU" -> "42 SmallModel/SmallBlock[residual2]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize";
"42 SmallModel/SmallBlock[residual2]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" -> "46 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/conv2d";
"43 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "44 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"44 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "45 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"45 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "46 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/conv2d";
"46 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/conv2d" -> "47 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize";
"47 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize" -> "48 SmallModel/SmallBlock[residual2]/add";
"48 SmallModel/SmallBlock[residual2]/add" -> "49 SmallModel/SmallBlock[residual2]/SymmetricQuantizer/symmetric_quantize";
"49 SmallModel/SmallBlock[residual2]/SymmetricQuantizer/symmetric_quantize" -> "50 SmallModel/SmallBlock[residual3]/ReLU[relu]/RELU";
"49 SmallModel/SmallBlock[residual2]/SymmetricQuantizer/symmetric_quantize" -> "62 SmallModel/SmallBlock[residual3]/add";
"49 SmallModel/SmallBlock[residual2]/SymmetricQuantizer/symmetric_quantize" -> "78 SmallModel/cat";
"50 SmallModel/SmallBlock[residual3]/ReLU[relu]/RELU" -> "54 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/conv2d";
"51 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "52 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"52 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "53 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"53 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "54 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/conv2d";
"54 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/conv2d" -> "55 SmallModel/SmallBlock[residual3]/ReLU[relu]/RELU";
"55 SmallModel/SmallBlock[residual3]/ReLU[relu]/RELU" -> "56 SmallModel/SmallBlock[residual3]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize";
"56 SmallModel/SmallBlock[residual3]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" -> "60 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/conv2d";
"57 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "58 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"58 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "59 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"59 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "60 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/conv2d";
"60 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/conv2d" -> "61 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize";
"6 SmallModel/NNCFConv2d[conv_cubic1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "101 SmallModel/NNCFConv2d[conv_cubic1]/conv2d";
"61 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize" -> "62 SmallModel/SmallBlock[residual3]/add";
"62 SmallModel/SmallBlock[residual3]/add" -> "63 SmallModel/SmallBlock[residual3]/SymmetricQuantizer/symmetric_quantize";
"63 SmallModel/SmallBlock[residual3]/SymmetricQuantizer/symmetric_quantize" -> "64 SmallModel/SmallBlock[residual4]/ReLU[relu]/RELU";
"63 SmallModel/SmallBlock[residual3]/SymmetricQuantizer/symmetric_quantize" -> "76 SmallModel/SmallBlock[residual4]/add";
"63 SmallModel/SmallBlock[residual3]/SymmetricQuantizer/symmetric_quantize" -> "78 SmallModel/cat";
"64 SmallModel/SmallBlock[residual4]/ReLU[relu]/RELU" -> "68 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/conv2d";
"65 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "66 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"66 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "67 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"67 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "68 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/conv2d";
"68 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/conv2d" -> "69 SmallModel/SmallBlock[residual4]/ReLU[relu]/RELU";
"69 SmallModel/SmallBlock[residual4]/ReLU[relu]/RELU" -> "70 SmallModel/SmallBlock[residual4]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize";
"70 SmallModel/SmallBlock[residual4]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" -> "74 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/conv2d";
"71 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "72 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"72 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "73 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"73 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "74 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/conv2d";
"74 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/conv2d" -> "75 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize";
"75 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize" -> "76 SmallModel/SmallBlock[residual4]/add";
"76 SmallModel/SmallBlock[residual4]/add" -> "77 SmallModel/SmallBlock[residual4]/SymmetricQuantizer/symmetric_quantize";
"77 SmallModel/SmallBlock[residual4]/SymmetricQuantizer/symmetric_quantize" -> "78 SmallModel/cat";
"78 SmallModel/cat" -> "82 SmallModel/NNCFConv2d[conv_mid]/conv2d";
"79 SmallModel/NNCFConv2d[conv_mid]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "80 SmallModel/NNCFConv2d[conv_mid]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"80 SmallModel/NNCFConv2d[conv_mid]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "81 SmallModel/NNCFConv2d[conv_mid]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"81 SmallModel/NNCFConv2d[conv_mid]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "82 SmallModel/NNCFConv2d[conv_mid]/conv2d";
"82 SmallModel/NNCFConv2d[conv_mid]/conv2d" -> "83 SmallModel/ReLU[relu]/RELU";
"83 SmallModel/ReLU[relu]/RELU" -> "84 SmallModel/ReLU[relu]/SymmetricQuantizer/symmetric_quantize";
"84 SmallModel/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" -> "88 SmallModel/Sequential[upscale]/NNCFConv2d[0]/conv2d";
"85 SmallModel/Sequential[upscale]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "86 SmallModel/Sequential[upscale]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"86 SmallModel/Sequential[upscale]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "87 SmallModel/Sequential[upscale]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"87 SmallModel/Sequential[upscale]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "88 SmallModel/Sequential[upscale]/NNCFConv2d[0]/conv2d";
"88 SmallModel/Sequential[upscale]/NNCFConv2d[0]/conv2d" -> "89 SmallModel/Sequential[upscale]/NNCFConv2d[0]/SymmetricQuantizer/symmetric_quantize";
"89 SmallModel/Sequential[upscale]/NNCFConv2d[0]/SymmetricQuantizer/symmetric_quantize" -> "90 SmallModel/Sequential[upscale]/PixelShuffle[1]/pixel_shuffle";
"90 SmallModel/Sequential[upscale]/PixelShuffle[1]/pixel_shuffle" -> "91 SmallModel/Sequential[upscale]/PixelShuffle[1]/SymmetricQuantizer/symmetric_quantize";
"91 SmallModel/Sequential[upscale]/PixelShuffle[1]/SymmetricQuantizer/symmetric_quantize" -> "92 SmallModel/Sequential[upscale]/ReLU[2]/RELU";
"92 SmallModel/Sequential[upscale]/ReLU[2]/RELU" -> "96 SmallModel/NNCFConv2d[conv_output]/conv2d";
"93 SmallModel/NNCFConv2d[conv_output]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "94 SmallModel/NNCFConv2d[conv_output]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"94 SmallModel/NNCFConv2d[conv_output]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "95 SmallModel/NNCFConv2d[conv_output]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"95 SmallModel/NNCFConv2d[conv_output]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "96 SmallModel/NNCFConv2d[conv_output]/conv2d";
"96 SmallModel/NNCFConv2d[conv_output]/conv2d" -> "97 SmallModel/NNCFConv2d[conv_output]/SymmetricQuantizer/symmetric_quantize";
"97 SmallModel/NNCFConv2d[conv_output]/SymmetricQuantizer/symmetric_quantize" -> "98 SmallModel/__mul__";
"98 SmallModel/__mul__" -> "99 SmallModel/SymmetricQuantizer/symmetric_quantize";
"12 SmallModel/NNCFConv2d[conv_cubic2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "104 SmallModel/NNCFConv2d[conv_cubic2]/conv2d";
"18 SmallModel/NNCFConv2d[conv_input]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "107 SmallModel/NNCFConv2d[conv_input]/conv2d";
"25 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "111 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/conv2d";
"31 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "114 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/conv2d";
"39 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "119 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/conv2d";
"45 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "122 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/conv2d";
"53 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "127 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/conv2d";
"59 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "130 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/conv2d";
"67 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "135 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/conv2d";
"73 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "138 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/conv2d";
"81 SmallModel/NNCFConv2d[conv_mid]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "143 SmallModel/NNCFConv2d[conv_mid]/conv2d";
"87 SmallModel/Sequential[upscale]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "146 SmallModel/Sequential[upscale]/NNCFConv2d[0]/conv2d";
"95 SmallModel/NNCFConv2d[conv_output]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "151 SmallModel/NNCFConv2d[conv_output]/conv2d";
"99 SmallModel/SymmetricQuantizer/symmetric_quantize" -> "100 SmallModel/add";
"101 SmallModel/NNCFConv2d[conv_cubic1]/conv2d" -> "102 SmallModel/ReLU[relu]/RELU";
"102 SmallModel/ReLU[relu]/RELU" -> "103 SmallModel/ReLU[relu]/SymmetricQuantizer/symmetric_quantize";
"103 SmallModel/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" -> "104 SmallModel/NNCFConv2d[conv_cubic2]/conv2d";
"104 SmallModel/NNCFConv2d[conv_cubic2]/conv2d" -> "105 SmallModel/Sigmoid[sigmoid]/sigmoid";
"105 SmallModel/Sigmoid[sigmoid]/sigmoid" -> "106 SmallModel/Sigmoid[sigmoid]/SymmetricQuantizer/symmetric_quantize";
"106 SmallModel/Sigmoid[sigmoid]/SymmetricQuantizer/symmetric_quantize" -> "153 SmallModel/__mul__";
"107 SmallModel/NNCFConv2d[conv_input]/conv2d" -> "108 SmallModel/ReLU[relu]/RELU";
"108 SmallModel/ReLU[relu]/RELU" -> "109 SmallModel/ReLU[relu]/SymmetricQuantizer/symmetric_quantize";
"109 SmallModel/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" -> "110 SmallModel/SmallBlock[residual1]/ReLU[relu]/RELU";
"109 SmallModel/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" -> "116 SmallModel/SmallBlock[residual1]/add";
"109 SmallModel/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" -> "142 SmallModel/cat";
"110 SmallModel/SmallBlock[residual1]/ReLU[relu]/RELU" -> "111 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/conv2d";
"111 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/conv2d" -> "112 SmallModel/SmallBlock[residual1]/ReLU[relu]/RELU";
"112 SmallModel/SmallBlock[residual1]/ReLU[relu]/RELU" -> "113 SmallModel/SmallBlock[residual1]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize";
"113 SmallModel/SmallBlock[residual1]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" -> "114 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/conv2d";
"114 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/conv2d" -> "115 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize";
"115 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize" -> "116 SmallModel/SmallBlock[residual1]/add";
"116 SmallModel/SmallBlock[residual1]/add" -> "117 SmallModel/SmallBlock[residual1]/SymmetricQuantizer/symmetric_quantize";
"117 SmallModel/SmallBlock[residual1]/SymmetricQuantizer/symmetric_quantize" -> "118 SmallModel/SmallBlock[residual2]/ReLU[relu]/RELU";
"117 SmallModel/SmallBlock[residual1]/SymmetricQuantizer/symmetric_quantize" -> "124 SmallModel/SmallBlock[residual2]/add";
"117 SmallModel/SmallBlock[residual1]/SymmetricQuantizer/symmetric_quantize" -> "142 SmallModel/cat";
"118 SmallModel/SmallBlock[residual2]/ReLU[relu]/RELU" -> "119 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/conv2d";
"119 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/conv2d" -> "120 SmallModel/SmallBlock[residual2]/ReLU[relu]/RELU";
"120 SmallModel/SmallBlock[residual2]/ReLU[relu]/RELU" -> "121 SmallModel/SmallBlock[residual2]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize";
"121 SmallModel/SmallBlock[residual2]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" -> "122 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/conv2d";
"122 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/conv2d" -> "123 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize";
"123 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize" -> "124 SmallModel/SmallBlock[residual2]/add";
"124 SmallModel/SmallBlock[residual2]/add" -> "125 SmallModel/SmallBlock[residual2]/SymmetricQuantizer/symmetric_quantize";
"125 SmallModel/SmallBlock[residual2]/SymmetricQuantizer/symmetric_quantize" -> "126 SmallModel/SmallBlock[residual3]/ReLU[relu]/RELU";
"125 SmallModel/SmallBlock[residual2]/SymmetricQuantizer/symmetric_quantize" -> "132 SmallModel/SmallBlock[residual3]/add";
"125 SmallModel/SmallBlock[residual2]/SymmetricQuantizer/symmetric_quantize" -> "142 SmallModel/cat";
"126 SmallModel/SmallBlock[residual3]/ReLU[relu]/RELU" -> "127 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/conv2d";
"127 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/conv2d" -> "128 SmallModel/SmallBlock[residual3]/ReLU[relu]/RELU";
"128 SmallModel/SmallBlock[residual3]/ReLU[relu]/RELU" -> "129 SmallModel/SmallBlock[residual3]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize";
"129 SmallModel/SmallBlock[residual3]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" -> "130 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/conv2d";
"130 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/conv2d" -> "131 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize";
"131 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize" -> "132 SmallModel/SmallBlock[residual3]/add";
"132 SmallModel/SmallBlock[residual3]/add" -> "133 SmallModel/SmallBlock[residual3]/SymmetricQuantizer/symmetric_quantize";
"133 SmallModel/SmallBlock[residual3]/SymmetricQuantizer/symmetric_quantize" -> "134 SmallModel/SmallBlock[residual4]/ReLU[relu]/RELU";
"133 SmallModel/SmallBlock[residual3]/SymmetricQuantizer/symmetric_quantize" -> "140 SmallModel/SmallBlock[residual4]/add";
"133 SmallModel/SmallBlock[residual3]/SymmetricQuantizer/symmetric_quantize" -> "142 SmallModel/cat";
"134 SmallModel/SmallBlock[residual4]/ReLU[relu]/RELU" -> "135 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/conv2d";
"135 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/conv2d" -> "136 SmallModel/SmallBlock[residual4]/ReLU[relu]/RELU";
"136 SmallModel/SmallBlock[residual4]/ReLU[relu]/RELU" -> "137 SmallModel/SmallBlock[residual4]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize";
"137 SmallModel/SmallBlock[residual4]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" -> "138 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/conv2d";
"138 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/conv2d" -> "139 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize";
"139 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize" -> "140 SmallModel/SmallBlock[residual4]/add";
"140 SmallModel/SmallBlock[residual4]/add" -> "141 SmallModel/SmallBlock[residual4]/SymmetricQuantizer/symmetric_quantize";
"141 SmallModel/SmallBlock[residual4]/SymmetricQuantizer/symmetric_quantize" -> "142 SmallModel/cat";
"142 SmallModel/cat" -> "143 SmallModel/NNCFConv2d[conv_mid]/conv2d";
"143 SmallModel/NNCFConv2d[conv_mid]/conv2d" -> "144 SmallModel/ReLU[relu]/RELU";
"144 SmallModel/ReLU[relu]/RELU" -> "145 SmallModel/ReLU[relu]/SymmetricQuantizer/symmetric_quantize";
"145 SmallModel/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" -> "146 SmallModel/Sequential[upscale]/NNCFConv2d[0]/conv2d";
"146 SmallModel/Sequential[upscale]/NNCFConv2d[0]/conv2d" -> "147 SmallModel/Sequential[upscale]/NNCFConv2d[0]/SymmetricQuantizer/symmetric_quantize";
"147 SmallModel/Sequential[upscale]/NNCFConv2d[0]/SymmetricQuantizer/symmetric_quantize" -> "148 SmallModel/Sequential[upscale]/PixelShuffle[1]/pixel_shuffle";
"148 SmallModel/Sequential[upscale]/PixelShuffle[1]/pixel_shuffle" -> "149 SmallModel/Sequential[upscale]/PixelShuffle[1]/SymmetricQuantizer/symmetric_quantize";
"149 SmallModel/Sequential[upscale]/PixelShuffle[1]/SymmetricQuantizer/symmetric_quantize" -> "150 SmallModel/Sequential[upscale]/ReLU[2]/RELU";
"150 SmallModel/Sequential[upscale]/ReLU[2]/RELU" -> "151 SmallModel/NNCFConv2d[conv_output]/conv2d";
"151 SmallModel/NNCFConv2d[conv_output]/conv2d" -> "152 SmallModel/NNCFConv2d[conv_output]/SymmetricQuantizer/symmetric_quantize";
"152 SmallModel/NNCFConv2d[conv_output]/SymmetricQuantizer/symmetric_quantize" -> "153 SmallModel/__mul__";
"153 SmallModel/__mul__" -> "154 SmallModel/SymmetricQuantizer/symmetric_quantize";
"154 SmallModel/SymmetricQuantizer/symmetric_quantize" -> "155 SmallModel/add";
}
