strict digraph  {
"0 SmallModel/NNCFConv2d[conv_cubic1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=0, scope="SmallModel/NNCFConv2d[conv_cubic1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"1 SmallModel/NNCFConv2d[conv_cubic1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=1, scope="SmallModel/NNCFConv2d[conv_cubic1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"2 SmallModel/NNCFConv2d[conv_cubic1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=2, scope="SmallModel/NNCFConv2d[conv_cubic1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"3 SmallModel/NNCFConv2d[conv_cubic1]/ModuleDict[pre_ops]/UpdateInputs[2]/SymmetricQuantizer[op]/symmetric_quantize" [id=3, scope="SmallModel/NNCFConv2d[conv_cubic1]/ModuleDict[pre_ops]/UpdateInputs[2]/SymmetricQuantizer[op]", type=symmetric_quantize];
"4 SmallModel/NNCFConv2d[conv_cubic1]/conv2d" [id=4, scope="SmallModel/NNCFConv2d[conv_cubic1]", type=conv2d];
"5 SmallModel/ReLU[relu]/RELU" [id=5, scope="SmallModel/ReLU[relu]", type=RELU];
"6 SmallModel/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" [id=6, scope="SmallModel/ReLU[relu]/SymmetricQuantizer", type=symmetric_quantize];
"7 SmallModel/NNCFConv2d[conv_cubic2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=7, scope="SmallModel/NNCFConv2d[conv_cubic2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"8 SmallModel/NNCFConv2d[conv_cubic2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=8, scope="SmallModel/NNCFConv2d[conv_cubic2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"9 SmallModel/NNCFConv2d[conv_cubic2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=9, scope="SmallModel/NNCFConv2d[conv_cubic2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"10 SmallModel/NNCFConv2d[conv_cubic2]/conv2d" [id=10, scope="SmallModel/NNCFConv2d[conv_cubic2]", type=conv2d];
"11 SmallModel/Sigmoid[sigmoid]/sigmoid" [id=11, scope="SmallModel/Sigmoid[sigmoid]", type=sigmoid];
"12 SmallModel/Sigmoid[sigmoid]/SymmetricQuantizer/symmetric_quantize" [id=12, scope="SmallModel/Sigmoid[sigmoid]/SymmetricQuantizer", type=symmetric_quantize];
"13 SmallModel/NNCFConv2d[conv_input]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=13, scope="SmallModel/NNCFConv2d[conv_input]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"14 SmallModel/NNCFConv2d[conv_input]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=14, scope="SmallModel/NNCFConv2d[conv_input]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"15 SmallModel/NNCFConv2d[conv_input]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=15, scope="SmallModel/NNCFConv2d[conv_input]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"16 SmallModel/NNCFConv2d[conv_input]/ModuleDict[pre_ops]/UpdateInputs[2]/SymmetricQuantizer[op]/symmetric_quantize" [id=16, scope="SmallModel/NNCFConv2d[conv_input]/ModuleDict[pre_ops]/UpdateInputs[2]/SymmetricQuantizer[op]", type=symmetric_quantize];
"17 SmallModel/NNCFConv2d[conv_input]/conv2d" [id=17, scope="SmallModel/NNCFConv2d[conv_input]", type=conv2d];
"18 SmallModel/ReLU[relu]/RELU" [id=18, scope="SmallModel/ReLU[relu]", type=RELU];
"19 SmallModel/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" [id=19, scope="SmallModel/ReLU[relu]/SymmetricQuantizer", type=symmetric_quantize];
"20 SmallModel/SmallBlock[residual1]/ReLU[relu]/RELU" [id=20, scope="SmallModel/SmallBlock[residual1]/ReLU[relu]", type=RELU];
"21 SmallModel/SmallBlock[residual1]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" [id=21, scope="SmallModel/SmallBlock[residual1]/ReLU[relu]/SymmetricQuantizer", type=symmetric_quantize];
"22 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=22, scope="SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"23 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=23, scope="SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"24 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=24, scope="SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"25 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/conv2d" [id=25, scope="SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]", type=conv2d];
"26 SmallModel/SmallBlock[residual1]/ReLU[relu]/RELU" [id=26, scope="SmallModel/SmallBlock[residual1]/ReLU[relu]", type=RELU];
"27 SmallModel/SmallBlock[residual1]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" [id=27, scope="SmallModel/SmallBlock[residual1]/ReLU[relu]/SymmetricQuantizer", type=symmetric_quantize];
"28 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=28, scope="SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"29 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=29, scope="SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"30 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=30, scope="SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"31 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/conv2d" [id=31, scope="SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]", type=conv2d];
"32 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize" [id=32, scope="SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/SymmetricQuantizer", type=symmetric_quantize];
"33 SmallModel/SmallBlock[residual1]/add" [id=33, scope="SmallModel/SmallBlock[residual1]", type=add];
"34 SmallModel/SmallBlock[residual2]/ReLU[relu]/RELU" [id=34, scope="SmallModel/SmallBlock[residual2]/ReLU[relu]", type=RELU];
"35 SmallModel/SmallBlock[residual2]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" [id=35, scope="SmallModel/SmallBlock[residual2]/ReLU[relu]/SymmetricQuantizer", type=symmetric_quantize];
"36 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=36, scope="SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"37 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=37, scope="SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"38 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=38, scope="SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"39 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/conv2d" [id=39, scope="SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]", type=conv2d];
"40 SmallModel/SmallBlock[residual2]/ReLU[relu]/RELU" [id=40, scope="SmallModel/SmallBlock[residual2]/ReLU[relu]", type=RELU];
"41 SmallModel/SmallBlock[residual2]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" [id=41, scope="SmallModel/SmallBlock[residual2]/ReLU[relu]/SymmetricQuantizer", type=symmetric_quantize];
"42 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=42, scope="SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"43 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=43, scope="SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"44 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=44, scope="SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"45 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/conv2d" [id=45, scope="SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]", type=conv2d];
"46 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize" [id=46, scope="SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/SymmetricQuantizer", type=symmetric_quantize];
"47 SmallModel/SmallBlock[residual2]/add" [id=47, scope="SmallModel/SmallBlock[residual2]", type=add];
"48 SmallModel/SmallBlock[residual3]/ReLU[relu]/RELU" [id=48, scope="SmallModel/SmallBlock[residual3]/ReLU[relu]", type=RELU];
"49 SmallModel/SmallBlock[residual3]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" [id=49, scope="SmallModel/SmallBlock[residual3]/ReLU[relu]/SymmetricQuantizer", type=symmetric_quantize];
"50 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=50, scope="SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"51 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=51, scope="SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"52 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=52, scope="SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"53 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/conv2d" [id=53, scope="SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]", type=conv2d];
"54 SmallModel/SmallBlock[residual3]/ReLU[relu]/RELU" [id=54, scope="SmallModel/SmallBlock[residual3]/ReLU[relu]", type=RELU];
"55 SmallModel/SmallBlock[residual3]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" [id=55, scope="SmallModel/SmallBlock[residual3]/ReLU[relu]/SymmetricQuantizer", type=symmetric_quantize];
"56 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=56, scope="SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"57 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=57, scope="SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"58 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=58, scope="SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"59 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/conv2d" [id=59, scope="SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]", type=conv2d];
"60 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize" [id=60, scope="SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/SymmetricQuantizer", type=symmetric_quantize];
"61 SmallModel/SmallBlock[residual3]/add" [id=61, scope="SmallModel/SmallBlock[residual3]", type=add];
"62 SmallModel/SmallBlock[residual4]/ReLU[relu]/RELU" [id=62, scope="SmallModel/SmallBlock[residual4]/ReLU[relu]", type=RELU];
"63 SmallModel/SmallBlock[residual4]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" [id=63, scope="SmallModel/SmallBlock[residual4]/ReLU[relu]/SymmetricQuantizer", type=symmetric_quantize];
"64 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=64, scope="SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"65 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=65, scope="SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"66 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=66, scope="SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"67 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/conv2d" [id=67, scope="SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]", type=conv2d];
"68 SmallModel/SmallBlock[residual4]/ReLU[relu]/RELU" [id=68, scope="SmallModel/SmallBlock[residual4]/ReLU[relu]", type=RELU];
"69 SmallModel/SmallBlock[residual4]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" [id=69, scope="SmallModel/SmallBlock[residual4]/ReLU[relu]/SymmetricQuantizer", type=symmetric_quantize];
"70 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=70, scope="SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"71 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=71, scope="SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"72 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=72, scope="SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"73 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/conv2d" [id=73, scope="SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]", type=conv2d];
"74 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize" [id=74, scope="SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/SymmetricQuantizer", type=symmetric_quantize];
"75 SmallModel/SmallBlock[residual4]/add" [id=75, scope="SmallModel/SmallBlock[residual4]", type=add];
"76 SmallModel/cat" [id=76, scope=SmallModel, type=cat];
"77 SmallModel/NNCFConv2d[conv_mid]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=77, scope="SmallModel/NNCFConv2d[conv_mid]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"78 SmallModel/NNCFConv2d[conv_mid]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=78, scope="SmallModel/NNCFConv2d[conv_mid]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"79 SmallModel/NNCFConv2d[conv_mid]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=79, scope="SmallModel/NNCFConv2d[conv_mid]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"80 SmallModel/NNCFConv2d[conv_mid]/conv2d" [id=80, scope="SmallModel/NNCFConv2d[conv_mid]", type=conv2d];
"81 SmallModel/ReLU[relu]/RELU" [id=81, scope="SmallModel/ReLU[relu]", type=RELU];
"82 SmallModel/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" [id=82, scope="SmallModel/ReLU[relu]/SymmetricQuantizer", type=symmetric_quantize];
"83 SmallModel/Sequential[upscale]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=83, scope="SmallModel/Sequential[upscale]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"84 SmallModel/Sequential[upscale]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=84, scope="SmallModel/Sequential[upscale]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"85 SmallModel/Sequential[upscale]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=85, scope="SmallModel/Sequential[upscale]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"86 SmallModel/Sequential[upscale]/NNCFConv2d[0]/conv2d" [id=86, scope="SmallModel/Sequential[upscale]/NNCFConv2d[0]", type=conv2d];
"87 SmallModel/Sequential[upscale]/NNCFConv2d[0]/SymmetricQuantizer/symmetric_quantize" [id=87, scope="SmallModel/Sequential[upscale]/NNCFConv2d[0]/SymmetricQuantizer", type=symmetric_quantize];
"88 SmallModel/Sequential[upscale]/PixelShuffle[1]/pixel_shuffle" [id=88, scope="SmallModel/Sequential[upscale]/PixelShuffle[1]", type=pixel_shuffle];
"89 SmallModel/Sequential[upscale]/ReLU[2]/RELU" [id=89, scope="SmallModel/Sequential[upscale]/ReLU[2]", type=RELU];
"90 SmallModel/Sequential[upscale]/ReLU[2]/SymmetricQuantizer/symmetric_quantize" [id=90, scope="SmallModel/Sequential[upscale]/ReLU[2]/SymmetricQuantizer", type=symmetric_quantize];
"91 SmallModel/NNCFConv2d[conv_output]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" [id=91, scope="SmallModel/NNCFConv2d[conv_output]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=calc_rb_binary_mask];
"92 SmallModel/NNCFConv2d[conv_output]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" [id=92, scope="SmallModel/NNCFConv2d[conv_output]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]", type=apply_binary_mask];
"93 SmallModel/NNCFConv2d[conv_output]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" [id=93, scope="SmallModel/NNCFConv2d[conv_output]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]", type=symmetric_quantize];
"94 SmallModel/NNCFConv2d[conv_output]/conv2d" [id=94, scope="SmallModel/NNCFConv2d[conv_output]", type=conv2d];
"95 SmallModel/NNCFConv2d[conv_output]/SymmetricQuantizer/symmetric_quantize" [id=95, scope="SmallModel/NNCFConv2d[conv_output]/SymmetricQuantizer", type=symmetric_quantize];
"96 SmallModel/__mul__" [id=96, scope=SmallModel, type=__mul__];
"97 SmallModel/SymmetricQuantizer/symmetric_quantize" [id=97, scope="SmallModel/SymmetricQuantizer", type=symmetric_quantize];
"98 SmallModel/add" [id=98, scope=SmallModel, type=add];
"0 SmallModel/NNCFConv2d[conv_cubic1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "1 SmallModel/NNCFConv2d[conv_cubic1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"1 SmallModel/NNCFConv2d[conv_cubic1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "2 SmallModel/NNCFConv2d[conv_cubic1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"2 SmallModel/NNCFConv2d[conv_cubic1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "4 SmallModel/NNCFConv2d[conv_cubic1]/conv2d";
"3 SmallModel/NNCFConv2d[conv_cubic1]/ModuleDict[pre_ops]/UpdateInputs[2]/SymmetricQuantizer[op]/symmetric_quantize" -> "4 SmallModel/NNCFConv2d[conv_cubic1]/conv2d";
"4 SmallModel/NNCFConv2d[conv_cubic1]/conv2d" -> "5 SmallModel/ReLU[relu]/RELU";
"5 SmallModel/ReLU[relu]/RELU" -> "6 SmallModel/ReLU[relu]/SymmetricQuantizer/symmetric_quantize";
"7 SmallModel/NNCFConv2d[conv_cubic2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "8 SmallModel/NNCFConv2d[conv_cubic2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"8 SmallModel/NNCFConv2d[conv_cubic2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "9 SmallModel/NNCFConv2d[conv_cubic2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"6 SmallModel/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" -> "10 SmallModel/NNCFConv2d[conv_cubic2]/conv2d";
"9 SmallModel/NNCFConv2d[conv_cubic2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "10 SmallModel/NNCFConv2d[conv_cubic2]/conv2d";
"10 SmallModel/NNCFConv2d[conv_cubic2]/conv2d" -> "11 SmallModel/Sigmoid[sigmoid]/sigmoid";
"11 SmallModel/Sigmoid[sigmoid]/sigmoid" -> "12 SmallModel/Sigmoid[sigmoid]/SymmetricQuantizer/symmetric_quantize";
"12 SmallModel/Sigmoid[sigmoid]/SymmetricQuantizer/symmetric_quantize" -> "96 SmallModel/__mul__";
"13 SmallModel/NNCFConv2d[conv_input]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "14 SmallModel/NNCFConv2d[conv_input]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"14 SmallModel/NNCFConv2d[conv_input]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "15 SmallModel/NNCFConv2d[conv_input]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"15 SmallModel/NNCFConv2d[conv_input]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "17 SmallModel/NNCFConv2d[conv_input]/conv2d";
"16 SmallModel/NNCFConv2d[conv_input]/ModuleDict[pre_ops]/UpdateInputs[2]/SymmetricQuantizer[op]/symmetric_quantize" -> "17 SmallModel/NNCFConv2d[conv_input]/conv2d";
"17 SmallModel/NNCFConv2d[conv_input]/conv2d" -> "18 SmallModel/ReLU[relu]/RELU";
"18 SmallModel/ReLU[relu]/RELU" -> "19 SmallModel/ReLU[relu]/SymmetricQuantizer/symmetric_quantize";
"19 SmallModel/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" -> "20 SmallModel/SmallBlock[residual1]/ReLU[relu]/RELU";
"19 SmallModel/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" -> "33 SmallModel/SmallBlock[residual1]/add";
"19 SmallModel/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" -> "76 SmallModel/cat";
"20 SmallModel/SmallBlock[residual1]/ReLU[relu]/RELU" -> "21 SmallModel/SmallBlock[residual1]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize";
"21 SmallModel/SmallBlock[residual1]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" -> "25 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/conv2d";
"22 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "23 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"23 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "24 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"24 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "25 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/conv2d";
"25 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv1]/conv2d" -> "26 SmallModel/SmallBlock[residual1]/ReLU[relu]/RELU";
"26 SmallModel/SmallBlock[residual1]/ReLU[relu]/RELU" -> "27 SmallModel/SmallBlock[residual1]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize";
"27 SmallModel/SmallBlock[residual1]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" -> "31 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/conv2d";
"28 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "29 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"29 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "30 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"30 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "31 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/conv2d";
"31 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/conv2d" -> "32 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize";
"32 SmallModel/SmallBlock[residual1]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize" -> "33 SmallModel/SmallBlock[residual1]/add";
"33 SmallModel/SmallBlock[residual1]/add" -> "34 SmallModel/SmallBlock[residual2]/ReLU[relu]/RELU";
"33 SmallModel/SmallBlock[residual1]/add" -> "47 SmallModel/SmallBlock[residual2]/add";
"33 SmallModel/SmallBlock[residual1]/add" -> "76 SmallModel/cat";
"34 SmallModel/SmallBlock[residual2]/ReLU[relu]/RELU" -> "35 SmallModel/SmallBlock[residual2]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize";
"35 SmallModel/SmallBlock[residual2]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" -> "39 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/conv2d";
"36 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "37 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"37 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "38 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"38 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "39 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/conv2d";
"39 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv1]/conv2d" -> "40 SmallModel/SmallBlock[residual2]/ReLU[relu]/RELU";
"40 SmallModel/SmallBlock[residual2]/ReLU[relu]/RELU" -> "41 SmallModel/SmallBlock[residual2]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize";
"41 SmallModel/SmallBlock[residual2]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" -> "45 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/conv2d";
"42 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "43 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"43 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "44 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"44 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "45 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/conv2d";
"45 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/conv2d" -> "46 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize";
"46 SmallModel/SmallBlock[residual2]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize" -> "47 SmallModel/SmallBlock[residual2]/add";
"47 SmallModel/SmallBlock[residual2]/add" -> "48 SmallModel/SmallBlock[residual3]/ReLU[relu]/RELU";
"47 SmallModel/SmallBlock[residual2]/add" -> "61 SmallModel/SmallBlock[residual3]/add";
"47 SmallModel/SmallBlock[residual2]/add" -> "76 SmallModel/cat";
"48 SmallModel/SmallBlock[residual3]/ReLU[relu]/RELU" -> "49 SmallModel/SmallBlock[residual3]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize";
"49 SmallModel/SmallBlock[residual3]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" -> "53 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/conv2d";
"50 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "51 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"51 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "52 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"52 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "53 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/conv2d";
"53 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv1]/conv2d" -> "54 SmallModel/SmallBlock[residual3]/ReLU[relu]/RELU";
"54 SmallModel/SmallBlock[residual3]/ReLU[relu]/RELU" -> "55 SmallModel/SmallBlock[residual3]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize";
"55 SmallModel/SmallBlock[residual3]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" -> "59 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/conv2d";
"56 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "57 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"57 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "58 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"58 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "59 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/conv2d";
"59 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/conv2d" -> "60 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize";
"60 SmallModel/SmallBlock[residual3]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize" -> "61 SmallModel/SmallBlock[residual3]/add";
"61 SmallModel/SmallBlock[residual3]/add" -> "62 SmallModel/SmallBlock[residual4]/ReLU[relu]/RELU";
"61 SmallModel/SmallBlock[residual3]/add" -> "75 SmallModel/SmallBlock[residual4]/add";
"61 SmallModel/SmallBlock[residual3]/add" -> "76 SmallModel/cat";
"62 SmallModel/SmallBlock[residual4]/ReLU[relu]/RELU" -> "63 SmallModel/SmallBlock[residual4]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize";
"63 SmallModel/SmallBlock[residual4]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" -> "67 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/conv2d";
"64 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "65 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"65 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "66 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"66 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "67 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/conv2d";
"67 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv1]/conv2d" -> "68 SmallModel/SmallBlock[residual4]/ReLU[relu]/RELU";
"68 SmallModel/SmallBlock[residual4]/ReLU[relu]/RELU" -> "69 SmallModel/SmallBlock[residual4]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize";
"69 SmallModel/SmallBlock[residual4]/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" -> "73 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/conv2d";
"70 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "71 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"71 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "72 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"72 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "73 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/conv2d";
"73 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/conv2d" -> "74 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize";
"74 SmallModel/SmallBlock[residual4]/NNCFConv2d[conv2]/SymmetricQuantizer/symmetric_quantize" -> "75 SmallModel/SmallBlock[residual4]/add";
"75 SmallModel/SmallBlock[residual4]/add" -> "76 SmallModel/cat";
"76 SmallModel/cat" -> "80 SmallModel/NNCFConv2d[conv_mid]/conv2d";
"77 SmallModel/NNCFConv2d[conv_mid]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "78 SmallModel/NNCFConv2d[conv_mid]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"78 SmallModel/NNCFConv2d[conv_mid]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "79 SmallModel/NNCFConv2d[conv_mid]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"79 SmallModel/NNCFConv2d[conv_mid]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "80 SmallModel/NNCFConv2d[conv_mid]/conv2d";
"80 SmallModel/NNCFConv2d[conv_mid]/conv2d" -> "81 SmallModel/ReLU[relu]/RELU";
"81 SmallModel/ReLU[relu]/RELU" -> "82 SmallModel/ReLU[relu]/SymmetricQuantizer/symmetric_quantize";
"82 SmallModel/ReLU[relu]/SymmetricQuantizer/symmetric_quantize" -> "86 SmallModel/Sequential[upscale]/NNCFConv2d[0]/conv2d";
"83 SmallModel/Sequential[upscale]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "84 SmallModel/Sequential[upscale]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"84 SmallModel/Sequential[upscale]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "85 SmallModel/Sequential[upscale]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"85 SmallModel/Sequential[upscale]/NNCFConv2d[0]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "86 SmallModel/Sequential[upscale]/NNCFConv2d[0]/conv2d";
"86 SmallModel/Sequential[upscale]/NNCFConv2d[0]/conv2d" -> "87 SmallModel/Sequential[upscale]/NNCFConv2d[0]/SymmetricQuantizer/symmetric_quantize";
"87 SmallModel/Sequential[upscale]/NNCFConv2d[0]/SymmetricQuantizer/symmetric_quantize" -> "88 SmallModel/Sequential[upscale]/PixelShuffle[1]/pixel_shuffle";
"88 SmallModel/Sequential[upscale]/PixelShuffle[1]/pixel_shuffle" -> "89 SmallModel/Sequential[upscale]/ReLU[2]/RELU";
"89 SmallModel/Sequential[upscale]/ReLU[2]/RELU" -> "90 SmallModel/Sequential[upscale]/ReLU[2]/SymmetricQuantizer/symmetric_quantize";
"90 SmallModel/Sequential[upscale]/ReLU[2]/SymmetricQuantizer/symmetric_quantize" -> "94 SmallModel/NNCFConv2d[conv_output]/conv2d";
"91 SmallModel/NNCFConv2d[conv_output]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/calc_rb_binary_mask" -> "92 SmallModel/NNCFConv2d[conv_output]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask";
"92 SmallModel/NNCFConv2d[conv_output]/ModuleDict[pre_ops]/UpdateWeight[0]/RBSparsifyingWeight[op]/apply_binary_mask" -> "93 SmallModel/NNCFConv2d[conv_output]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize";
"93 SmallModel/NNCFConv2d[conv_output]/ModuleDict[pre_ops]/UpdateWeight[1]/SymmetricQuantizer[op]/symmetric_quantize" -> "94 SmallModel/NNCFConv2d[conv_output]/conv2d";
"94 SmallModel/NNCFConv2d[conv_output]/conv2d" -> "95 SmallModel/NNCFConv2d[conv_output]/SymmetricQuantizer/symmetric_quantize";
"95 SmallModel/NNCFConv2d[conv_output]/SymmetricQuantizer/symmetric_quantize" -> "96 SmallModel/__mul__";
"96 SmallModel/__mul__" -> "97 SmallModel/SymmetricQuantizer/symmetric_quantize";
"97 SmallModel/SymmetricQuantizer/symmetric_quantize" -> "98 SmallModel/add";
}
